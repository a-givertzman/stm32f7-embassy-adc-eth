{"message":"can't find crate for `test`","code":{"code":"E0463","explanation":"A plugin/crate was declared but cannot be found.\n\nErroneous code example:\n\n```compile_fail,E0463\n#![feature(plugin)]\n#![plugin(cookie_monster)] // error: can't find crate for `cookie_monster`\nextern crate cake_is_a_lie; // error: can't find crate for `cake_is_a_lie`\n```\n\nYou need to link your code to the relevant crate in order to be able to use it\n(through Cargo or the `-L` option of rustc example). Plugins are crates as\nwell, and you link to them the same way.\n\n## Common causes\n\n- The crate is not present at all. If using Cargo, add it to `[dependencies]`\n  in Cargo.toml.\n- The crate is present, but under a different name. If using Cargo, look for\n  `package = ` under `[dependencies]` in Cargo.toml.\n\n## Common causes for missing `std` or `core`\n\n- You are cross-compiling for a target which doesn't have `std` prepackaged.\n  Consider one of the following:\n  + Adding a pre-compiled version of std with `rustup target add`\n  + Building std from source with `cargo build -Z build-std`\n  + Using `#![no_std]` at the crate root, so you won't need `std` in the first\n    place.\n- You are developing the compiler itself and haven't built libstd from source.\n  You can usually build it with `x.py build library/std`. More information\n  about x.py is available in the [rustc-dev-guide].\n\n[rustc-dev-guide]: https://rustc-dev-guide.rust-lang.org/building/how-to-build-and-run.html#building-the-compiler\n"},"level":"error","spans":[{"file_name":"src/bin/spi_dma.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":true,"text":[],"label":"can't find crate","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0463]\u001b[0m\u001b[0m\u001b[1m: can't find crate for `test`\u001b[0m\n\n"}
{"message":"the trait bound `DMA1_CH3: embassy_stm32::spi::TxDma<embassy_stm32::peripherals::SPI3>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/bin/spi_dma.rs","byte_start":764,"byte_end":772,"line_start":25,"line_end":25,"column_start":13,"column_end":21,"is_primary":true,"text":[{"text":"        spi.transfer(&mut read, write.as_bytes()).await.ok();","highlight_start":13,"highlight_end":21}],"label":"the trait `embassy_stm32::spi::TxDma<embassy_stm32::peripherals::SPI3>` is not implemented for `DMA1_CH3`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `embassy_stm32::spi::TxDma<T>`:\n  <DMA1_CH4 as embassy_stm32::spi::TxDma<embassy_stm32::peripherals::SPI2>>\n  <DMA1_CH5 as embassy_stm32::spi::TxDma<embassy_stm32::peripherals::SPI3>>\n  <DMA1_CH6 as embassy_stm32::spi::TxDma<embassy_stm32::peripherals::SPI2>>\n  <DMA1_CH7 as embassy_stm32::spi::TxDma<embassy_stm32::peripherals::SPI3>>\n  <DMA2_CH1 as embassy_stm32::spi::TxDma<embassy_stm32::peripherals::SPI4>>\n  <DMA2_CH2 as embassy_stm32::spi::TxDma<embassy_stm32::peripherals::SPI4>>\n  <DMA2_CH3 as embassy_stm32::spi::TxDma<embassy_stm32::peripherals::SPI1>>\n  <DMA2_CH4 as embassy_stm32::spi::TxDma<embassy_stm32::peripherals::SPI4>>\nand 4 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `embassy_stm32::spi::Spi::<'d, T, Tx, Rx>::transfer`","code":null,"level":"note","spans":[{"file_name":"/home/lobanov/code/rust-proj/embassy/embassy-stm32/src/spi/mod.rs","byte_start":16567,"byte_end":16575,"line_start":575,"line_end":575,"column_start":13,"column_end":21,"is_primary":true,"text":[{"text":"        Tx: TxDma<T>,","highlight_start":13,"highlight_end":21}],"label":"required by this bound in `Spi::<'d, T, Tx, Rx>::transfer`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `DMA1_CH3: embassy_stm32::spi::TxDma<embassy_stm32::peripherals::SPI3>` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/bin/spi_dma.rs:25:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m25\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        spi.transfer(&mut read, write.as_bytes()).await.ok();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `embassy_stm32::spi::TxDma<embassy_stm32::peripherals::SPI3>` is not implemented for `DMA1_CH3`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `embassy_stm32::spi::TxDma<T>`:\u001b[0m\n\u001b[0m              <DMA1_CH4 as embassy_stm32::spi::TxDma<embassy_stm32::peripherals::SPI2>>\u001b[0m\n\u001b[0m              <DMA1_CH5 as embassy_stm32::spi::TxDma<embassy_stm32::peripherals::SPI3>>\u001b[0m\n\u001b[0m              <DMA1_CH6 as embassy_stm32::spi::TxDma<embassy_stm32::peripherals::SPI2>>\u001b[0m\n\u001b[0m              <DMA1_CH7 as embassy_stm32::spi::TxDma<embassy_stm32::peripherals::SPI3>>\u001b[0m\n\u001b[0m              <DMA2_CH1 as embassy_stm32::spi::TxDma<embassy_stm32::peripherals::SPI4>>\u001b[0m\n\u001b[0m              <DMA2_CH2 as embassy_stm32::spi::TxDma<embassy_stm32::peripherals::SPI4>>\u001b[0m\n\u001b[0m              <DMA2_CH3 as embassy_stm32::spi::TxDma<embassy_stm32::peripherals::SPI1>>\u001b[0m\n\u001b[0m              <DMA2_CH4 as embassy_stm32::spi::TxDma<embassy_stm32::peripherals::SPI4>>\u001b[0m\n\u001b[0m            and 4 others\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `embassy_stm32::spi::Spi::<'d, T, Tx, Rx>::transfer`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/lobanov/code/rust-proj/embassy/embassy-stm32/src/spi/mod.rs:575:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m575\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Tx: TxDma<T>,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Spi::<'d, T, Tx, Rx>::transfer`\u001b[0m\n\n"}
{"message":"the trait bound `DMA1_CH4: embassy_stm32::spi::RxDma<embassy_stm32::peripherals::SPI3>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/bin/spi_dma.rs","byte_start":764,"byte_end":772,"line_start":25,"line_end":25,"column_start":13,"column_end":21,"is_primary":true,"text":[{"text":"        spi.transfer(&mut read, write.as_bytes()).await.ok();","highlight_start":13,"highlight_end":21}],"label":"the trait `embassy_stm32::spi::RxDma<embassy_stm32::peripherals::SPI3>` is not implemented for `DMA1_CH4`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `embassy_stm32::spi::RxDma<T>`:\n  <DMA1_CH0 as embassy_stm32::spi::RxDma<embassy_stm32::peripherals::SPI3>>\n  <DMA1_CH1 as embassy_stm32::spi::RxDma<embassy_stm32::peripherals::SPI2>>\n  <DMA1_CH2 as embassy_stm32::spi::RxDma<embassy_stm32::peripherals::SPI3>>\n  <DMA1_CH3 as embassy_stm32::spi::RxDma<embassy_stm32::peripherals::SPI2>>\n  <DMA2_CH0 as embassy_stm32::spi::RxDma<embassy_stm32::peripherals::SPI1>>\n  <DMA2_CH0 as embassy_stm32::spi::RxDma<embassy_stm32::peripherals::SPI4>>\n  <DMA2_CH2 as embassy_stm32::spi::RxDma<embassy_stm32::peripherals::SPI1>>\n  <DMA2_CH3 as embassy_stm32::spi::RxDma<embassy_stm32::peripherals::SPI4>>\nand 3 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `embassy_stm32::spi::Spi::<'d, T, Tx, Rx>::transfer`","code":null,"level":"note","spans":[{"file_name":"/home/lobanov/code/rust-proj/embassy/embassy-stm32/src/spi/mod.rs","byte_start":16589,"byte_end":16597,"line_start":576,"line_end":576,"column_start":13,"column_end":21,"is_primary":true,"text":[{"text":"        Rx: RxDma<T>,","highlight_start":13,"highlight_end":21}],"label":"required by this bound in `Spi::<'d, T, Tx, Rx>::transfer`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `DMA1_CH4: embassy_stm32::spi::RxDma<embassy_stm32::peripherals::SPI3>` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/bin/spi_dma.rs:25:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m25\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        spi.transfer(&mut read, write.as_bytes()).await.ok();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `embassy_stm32::spi::RxDma<embassy_stm32::peripherals::SPI3>` is not implemented for `DMA1_CH4`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `embassy_stm32::spi::RxDma<T>`:\u001b[0m\n\u001b[0m              <DMA1_CH0 as embassy_stm32::spi::RxDma<embassy_stm32::peripherals::SPI3>>\u001b[0m\n\u001b[0m              <DMA1_CH1 as embassy_stm32::spi::RxDma<embassy_stm32::peripherals::SPI2>>\u001b[0m\n\u001b[0m              <DMA1_CH2 as embassy_stm32::spi::RxDma<embassy_stm32::peripherals::SPI3>>\u001b[0m\n\u001b[0m              <DMA1_CH3 as embassy_stm32::spi::RxDma<embassy_stm32::peripherals::SPI2>>\u001b[0m\n\u001b[0m              <DMA2_CH0 as embassy_stm32::spi::RxDma<embassy_stm32::peripherals::SPI1>>\u001b[0m\n\u001b[0m              <DMA2_CH0 as embassy_stm32::spi::RxDma<embassy_stm32::peripherals::SPI4>>\u001b[0m\n\u001b[0m              <DMA2_CH2 as embassy_stm32::spi::RxDma<embassy_stm32::peripherals::SPI1>>\u001b[0m\n\u001b[0m              <DMA2_CH3 as embassy_stm32::spi::RxDma<embassy_stm32::peripherals::SPI4>>\u001b[0m\n\u001b[0m            and 3 others\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `embassy_stm32::spi::Spi::<'d, T, Tx, Rx>::transfer`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/lobanov/code/rust-proj/embassy/embassy-stm32/src/spi/mod.rs:576:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m576\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Rx: RxDma<T>,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Spi::<'d, T, Tx, Rx>::transfer`\u001b[0m\n\n"}
{"message":"no field `pll1` on type `embassy_stm32::rcc::Config`","code":{"code":"E0609","explanation":"Attempted to access a non-existent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/bin/spi_dma.rs","byte_start":1136,"byte_end":1140,"line_start":39,"line_end":39,"column_start":16,"column_end":20,"is_primary":true,"text":[{"text":"    config.rcc.pll1.q_ck = Some(mhz(100));","highlight_start":16,"highlight_end":20}],"label":"unknown field","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"available fields are: `hse`, `bypass_hse`, `hclk`, `sys_ck`, `pclk1` ... and 2 others","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0609]\u001b[0m\u001b[0m\u001b[1m: no field `pll1` on type `embassy_stm32::rcc::Config`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/bin/spi_dma.rs:39:16\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m39\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    config.rcc.pll1.q_ck = Some(mhz(100));\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munknown field\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: available fields are: `hse`, `bypass_hse`, `hclk`, `sys_ck`, `pclk1` ... and 2 others\u001b[0m\n\n"}
{"message":"aborting due to 4 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 4 previous errors\u001b[0m\n\n"}
{"message":"Some errors have detailed explanations: E0277, E0463, E0609.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mSome errors have detailed explanations: E0277, E0463, E0609.\u001b[0m\n"}
{"message":"For more information about an error, try `rustc --explain E0277`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about an error, try `rustc --explain E0277`.\u001b[0m\n"}
