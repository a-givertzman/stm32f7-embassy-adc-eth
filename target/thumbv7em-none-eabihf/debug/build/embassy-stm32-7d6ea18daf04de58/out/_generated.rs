embassy_hal_common :: peripherals_definition ! (ADC1 , ADC2 , ADC3 , ADC3_COMMON , ADC_COMMON , BDMA , CRC , DAC1 , DBGMCU , DCMI , DMA1 , DMA2 , DMA2D , DMAMUX1 , DMAMUX2 , ETH , FLASH , FMC , PA0 , PA1 , PA2 , PA3 , PA4 , PA5 , PA6 , PA7 , PA8 , PA9 , PA10 , PA11 , PA12 , PA13 , PA14 , PA15 , PB0 , PB1 , PB2 , PB3 , PB4 , PB5 , PB6 , PB7 , PB8 , PB9 , PB10 , PB11 , PB12 , PB13 , PB14 , PB15 , PC0 , PC1 , PC2 , PC3 , PC4 , PC5 , PC6 , PC7 , PC8 , PC9 , PC10 , PC11 , PC12 , PC13 , PC14 , PC15 , PD0 , PD1 , PD2 , PD3 , PD4 , PD5 , PD6 , PD7 , PD8 , PD9 , PD10 , PD11 , PD12 , PD13 , PD14 , PD15 , PE0 , PE1 , PE2 , PE3 , PE4 , PE5 , PE6 , PE7 , PE8 , PE9 , PE10 , PE11 , PE12 , PE13 , PE14 , PE15 , PF0 , PF1 , PF2 , PF3 , PF4 , PF5 , PF6 , PF7 , PF8 , PF9 , PF10 , PF11 , PF12 , PF13 , PF14 , PF15 , PG0 , PG1 , PG2 , PG3 , PG4 , PG5 , PG6 , PG7 , PG8 , PG9 , PG10 , PG11 , PG12 , PG13 , PG14 , PG15 , PH0 , PH1 , PH2 , PH3 , PH4 , PH5 , PH6 , PH7 , PH8 , PH9 , PH10 , PH11 , PH12 , PH13 , PH14 , PH15 , PI0 , PI1 , PI2 , PI3 , PI4 , PI5 , PI6 , PI7 , PI8 , PI9 , PI10 , PI11 , PI12 , PI13 , PI14 , PI15 , PJ0 , PJ1 , PJ2 , PJ3 , PJ4 , PJ5 , PJ6 , PJ7 , PJ8 , PJ9 , PJ10 , PJ11 , PJ12 , PJ13 , PJ14 , PJ15 , PK0 , PK1 , PK2 , PK3 , PK4 , PK5 , PK6 , PK7 , PK8 , PK9 , PK10 , PK11 , PK12 , PK13 , PK14 , PK15 , I2C1 , I2C2 , I2C3 , I2C4 , IWDG1 , JPEG , LPUART1 , MDIOS , PWR , QUADSPI , MCO1 , MCO2 , RCC , RNG , RTC , SDMMC1 , SDMMC2 , SPI1 , SPI2 , SPI3 , SPI4 , SPI5 , SPI6 , SYSCFG , TIM1 , TIM12 , TIM13 , TIM14 , TIM15 , TIM16 , TIM17 , TIM2 , TIM3 , TIM4 , TIM5 , TIM6 , TIM7 , TIM8 , UART4 , UART5 , UART7 , UART8 , UID , USART1 , USART2 , USART3 , USART6 , USB_OTG_FS , USB_OTG_HS , EXTI0 , EXTI1 , EXTI2 , EXTI3 , EXTI4 , EXTI5 , EXTI6 , EXTI7 , EXTI8 , EXTI9 , EXTI10 , EXTI11 , EXTI12 , EXTI13 , EXTI14 , EXTI15 , DMA1_CH0 , DMA1_CH1 , DMA1_CH2 , DMA1_CH3 , DMA1_CH4 , DMA1_CH5 , DMA1_CH6 , DMA1_CH7 , DMA2_CH0 , DMA2_CH1 , DMA2_CH2 , DMA2_CH3 , DMA2_CH4 , DMA2_CH5 , DMA2_CH6 , DMA2_CH7 , BDMA_CH0 , BDMA_CH1 , BDMA_CH2 , BDMA_CH3 , BDMA_CH4 , BDMA_CH5 , BDMA_CH6 , BDMA_CH7) ; embassy_hal_common :: peripherals_struct ! (ADC1 , ADC2 , ADC3 , ADC3_COMMON , ADC_COMMON , BDMA , CRC , DAC1 , DBGMCU , DCMI , DMA1 , DMA2 , DMA2D , DMAMUX1 , DMAMUX2 , ETH , FLASH , FMC , PA0 , PA1 , PA2 , PA3 , PA4 , PA5 , PA6 , PA7 , PA8 , PA9 , PA10 , PA11 , PA12 , PA13 , PA14 , PA15 , PB0 , PB1 , PB2 , PB3 , PB4 , PB5 , PB6 , PB7 , PB8 , PB9 , PB10 , PB11 , PB12 , PB13 , PB14 , PB15 , PC0 , PC1 , PC2 , PC3 , PC4 , PC5 , PC6 , PC7 , PC8 , PC9 , PC10 , PC11 , PC12 , PC13 , PC14 , PC15 , PD0 , PD1 , PD2 , PD3 , PD4 , PD5 , PD6 , PD7 , PD8 , PD9 , PD10 , PD11 , PD12 , PD13 , PD14 , PD15 , PE0 , PE1 , PE2 , PE3 , PE4 , PE5 , PE6 , PE7 , PE8 , PE9 , PE10 , PE11 , PE12 , PE13 , PE14 , PE15 , PF0 , PF1 , PF2 , PF3 , PF4 , PF5 , PF6 , PF7 , PF8 , PF9 , PF10 , PF11 , PF12 , PF13 , PF14 , PF15 , PG0 , PG1 , PG2 , PG3 , PG4 , PG5 , PG6 , PG7 , PG8 , PG9 , PG10 , PG11 , PG12 , PG13 , PG14 , PG15 , PH0 , PH1 , PH2 , PH3 , PH4 , PH5 , PH6 , PH7 , PH8 , PH9 , PH10 , PH11 , PH12 , PH13 , PH14 , PH15 , PI0 , PI1 , PI2 , PI3 , PI4 , PI5 , PI6 , PI7 , PI8 , PI9 , PI10 , PI11 , PI12 , PI13 , PI14 , PI15 , PJ0 , PJ1 , PJ2 , PJ3 , PJ4 , PJ5 , PJ6 , PJ7 , PJ8 , PJ9 , PJ10 , PJ11 , PJ12 , PJ13 , PJ14 , PJ15 , PK0 , PK1 , PK2 , PK3 , PK4 , PK5 , PK6 , PK7 , PK8 , PK9 , PK10 , PK11 , PK12 , PK13 , PK14 , PK15 , I2C1 , I2C2 , I2C3 , I2C4 , IWDG1 , JPEG , LPUART1 , MDIOS , PWR , QUADSPI , MCO1 , MCO2 , RCC , RNG , RTC , SDMMC1 , SDMMC2 , SPI1 , SPI2 , SPI3 , SPI4 , SPI5 , SPI6 , SYSCFG , TIM1 , TIM12 , TIM13 , TIM14 , TIM15 , TIM16 , TIM17 , TIM3 , TIM4 , TIM5 , TIM6 , TIM7 , TIM8 , UART4 , UART5 , UART7 , UART8 , UID , USART1 , USART2 , USART3 , USART6 , USB_OTG_FS , USB_OTG_HS , EXTI0 , EXTI1 , EXTI2 , EXTI3 , EXTI4 , EXTI5 , EXTI6 , EXTI7 , EXTI8 , EXTI9 , EXTI10 , EXTI11 , EXTI12 , EXTI13 , EXTI14 , EXTI15 , DMA1_CH0 , DMA1_CH1 , DMA1_CH2 , DMA1_CH3 , DMA1_CH4 , DMA1_CH5 , DMA1_CH6 , DMA1_CH7 , DMA2_CH0 , DMA2_CH1 , DMA2_CH2 , DMA2_CH3 , DMA2_CH4 , DMA2_CH5 , DMA2_CH6 , DMA2_CH7 , BDMA_CH0 , BDMA_CH1 , BDMA_CH2 , BDMA_CH3 , BDMA_CH4 , BDMA_CH5 , BDMA_CH6 , BDMA_CH7) ; pub mod interrupt { use crate :: pac :: Interrupt as InterruptEnum ; use embassy_cortex_m :: interrupt :: _export :: declare ; declare ! (WWDG) ; declare ! (PVD_AVD) ; declare ! (TAMP_STAMP) ; declare ! (RTC_WKUP) ; declare ! (FLASH) ; declare ! (RCC) ; declare ! (EXTI0) ; declare ! (EXTI1) ; declare ! (EXTI2) ; declare ! (EXTI3) ; declare ! (EXTI4) ; declare ! (DMA1_STREAM0) ; declare ! (DMA1_STREAM1) ; declare ! (DMA1_STREAM2) ; declare ! (DMA1_STREAM3) ; declare ! (DMA1_STREAM4) ; declare ! (DMA1_STREAM5) ; declare ! (DMA1_STREAM6) ; declare ! (ADC) ; declare ! (FDCAN1_IT0) ; declare ! (FDCAN2_IT0) ; declare ! (FDCAN1_IT1) ; declare ! (FDCAN2_IT1) ; declare ! (EXTI9_5) ; declare ! (TIM1_BRK) ; declare ! (TIM1_UP) ; declare ! (TIM1_TRG_COM) ; declare ! (TIM1_CC) ; declare ! (TIM2) ; declare ! (TIM3) ; declare ! (TIM4) ; declare ! (I2C1_EV) ; declare ! (I2C1_ER) ; declare ! (I2C2_EV) ; declare ! (I2C2_ER) ; declare ! (SPI1) ; declare ! (SPI2) ; declare ! (USART1) ; declare ! (USART2) ; declare ! (USART3) ; declare ! (EXTI15_10) ; declare ! (RTC_ALARM) ; declare ! (TIM8_BRK_TIM12) ; declare ! (TIM8_UP_TIM13) ; declare ! (TIM8_TRG_COM_TIM14) ; declare ! (TIM8_CC) ; declare ! (DMA1_STREAM7) ; declare ! (FMC) ; declare ! (SDMMC1) ; declare ! (TIM5) ; declare ! (SPI3) ; declare ! (UART4) ; declare ! (UART5) ; declare ! (TIM6_DAC) ; declare ! (TIM7) ; declare ! (DMA2_STREAM0) ; declare ! (DMA2_STREAM1) ; declare ! (DMA2_STREAM2) ; declare ! (DMA2_STREAM3) ; declare ! (DMA2_STREAM4) ; declare ! (ETH) ; declare ! (ETH_WKUP) ; declare ! (FDCAN_CAL) ; declare ! (DMA2_STREAM5) ; declare ! (DMA2_STREAM6) ; declare ! (DMA2_STREAM7) ; declare ! (USART6) ; declare ! (I2C3_EV) ; declare ! (I2C3_ER) ; declare ! (OTG_HS_EP1_OUT) ; declare ! (OTG_HS_EP1_IN) ; declare ! (OTG_HS_WKUP) ; declare ! (OTG_HS) ; declare ! (DCMI) ; declare ! (RNG) ; declare ! (FPU) ; declare ! (UART7) ; declare ! (UART8) ; declare ! (SPI4) ; declare ! (SPI5) ; declare ! (SPI6) ; declare ! (SAI1) ; declare ! (LTDC) ; declare ! (LTDC_ER) ; declare ! (DMA2D) ; declare ! (SAI2) ; declare ! (QUADSPI) ; declare ! (LPTIM1) ; declare ! (CEC) ; declare ! (I2C4_EV) ; declare ! (I2C4_ER) ; declare ! (SPDIF_RX) ; declare ! (OTG_FS_EP1_OUT) ; declare ! (OTG_FS_EP1_IN) ; declare ! (OTG_FS_WKUP) ; declare ! (OTG_FS) ; declare ! (HRTIM1_MASTER) ; declare ! (HRTIM1_TIMA) ; declare ! (HRTIM1_TIMB) ; declare ! (HRTIM1_TIMC) ; declare ! (HRTIM1_TIMD) ; declare ! (HRTIM1_TIME) ; declare ! (HRTIM1_FLT) ; declare ! (SAI3) ; declare ! (SWPMI1) ; declare ! (TIM15) ; declare ! (TIM16) ; declare ! (TIM17) ; declare ! (MDIOS_WKUP) ; declare ! (MDIOS) ; declare ! (JPEG) ; declare ! (MDMA) ; declare ! (SDMMC2) ; declare ! (HSEM1) ; declare ! (ADC3) ; declare ! (BDMA_CHANNEL0) ; declare ! (BDMA_CHANNEL1) ; declare ! (BDMA_CHANNEL2) ; declare ! (BDMA_CHANNEL3) ; declare ! (BDMA_CHANNEL4) ; declare ! (BDMA_CHANNEL5) ; declare ! (BDMA_CHANNEL6) ; declare ! (BDMA_CHANNEL7) ; declare ! (LPTIM2) ; declare ! (LPTIM3) ; declare ! (LPTIM4) ; declare ! (LPTIM5) ; declare ! (LPUART1) ; declare ! (CRS) ; declare ! (ECC) ; declare ! (SAI4) ; declare ! (WAKEUP_PIN) ; } pub const MAX_ERASE_SIZE : usize = 131072u32 as usize ; pub mod flash_regions { pub const BANK1_REGION : crate :: flash :: FlashRegion = crate :: flash :: FlashRegion { bank : crate :: flash :: FlashBank :: Bank1 , base : 134217728u32 , size : 1048576u32 , erase_size : 131072u32 , write_size : 32u32 , erase_value : 255u8 , } ; # [cfg (flash)] pub struct Bank1Region < 'd > (pub & 'static crate :: flash :: FlashRegion , pub (crate) embassy_hal_common :: PeripheralRef < 'd , crate :: peripherals :: FLASH > ,) ; pub const BANK2_REGION : crate :: flash :: FlashRegion = crate :: flash :: FlashRegion { bank : crate :: flash :: FlashBank :: Bank2 , base : 135266304u32 , size : 1048576u32 , erase_size : 131072u32 , write_size : 32u32 , erase_value : 255u8 , } ; # [cfg (flash)] pub struct Bank2Region < 'd > (pub & 'static crate :: flash :: FlashRegion , pub (crate) embassy_hal_common :: PeripheralRef < 'd , crate :: peripherals :: FLASH > ,) ; # [cfg (flash)] pub struct FlashLayout < 'd > { pub bank1_region : Bank1Region < 'd > , pub bank2_region : Bank2Region < 'd > } # [cfg (flash)] impl < 'd > FlashLayout < 'd > { pub (crate) fn new (p : embassy_hal_common :: PeripheralRef < 'd , crate :: peripherals :: FLASH >) -> Self { Self { bank1_region : Bank1Region (& BANK1_REGION , unsafe { p . clone_unchecked () }) , bank2_region : Bank2Region (& BANK2_REGION , unsafe { p . clone_unchecked () }) } } } pub const FLASH_REGIONS : [& crate :: flash :: FlashRegion ; 2usize] = [& BANK1_REGION , & BANK2_REGION] ; } # [crate :: interrupt] unsafe fn DMA1_STREAM3 () { < crate :: peripherals :: DMA1_CH3 as crate :: dma :: dma :: sealed :: Channel > :: on_irq () ; } # [crate :: interrupt] unsafe fn DMA2_STREAM5 () { < crate :: peripherals :: DMA2_CH5 as crate :: dma :: dma :: sealed :: Channel > :: on_irq () ; } # [crate :: interrupt] unsafe fn DMA1_STREAM1 () { < crate :: peripherals :: DMA1_CH1 as crate :: dma :: dma :: sealed :: Channel > :: on_irq () ; } # [crate :: interrupt] unsafe fn DMA2_STREAM1 () { < crate :: peripherals :: DMA2_CH1 as crate :: dma :: dma :: sealed :: Channel > :: on_irq () ; } # [crate :: interrupt] unsafe fn DMA1_STREAM6 () { < crate :: peripherals :: DMA1_CH6 as crate :: dma :: dma :: sealed :: Channel > :: on_irq () ; } # [crate :: interrupt] unsafe fn DMA2_STREAM6 () { < crate :: peripherals :: DMA2_CH6 as crate :: dma :: dma :: sealed :: Channel > :: on_irq () ; } # [crate :: interrupt] unsafe fn BDMA_CHANNEL6 () { < crate :: peripherals :: BDMA_CH6 as crate :: dma :: bdma :: sealed :: Channel > :: on_irq () ; } # [crate :: interrupt] unsafe fn DMA1_STREAM0 () { < crate :: peripherals :: DMA1_CH0 as crate :: dma :: dma :: sealed :: Channel > :: on_irq () ; } # [crate :: interrupt] unsafe fn BDMA_CHANNEL5 () { < crate :: peripherals :: BDMA_CH5 as crate :: dma :: bdma :: sealed :: Channel > :: on_irq () ; } # [crate :: interrupt] unsafe fn DMA1_STREAM7 () { < crate :: peripherals :: DMA1_CH7 as crate :: dma :: dma :: sealed :: Channel > :: on_irq () ; } # [crate :: interrupt] unsafe fn DMA2_STREAM7 () { < crate :: peripherals :: DMA2_CH7 as crate :: dma :: dma :: sealed :: Channel > :: on_irq () ; } # [crate :: interrupt] unsafe fn BDMA_CHANNEL3 () { < crate :: peripherals :: BDMA_CH3 as crate :: dma :: bdma :: sealed :: Channel > :: on_irq () ; } # [crate :: interrupt] unsafe fn DMA1_STREAM2 () { < crate :: peripherals :: DMA1_CH2 as crate :: dma :: dma :: sealed :: Channel > :: on_irq () ; } # [crate :: interrupt] unsafe fn BDMA_CHANNEL1 () { < crate :: peripherals :: BDMA_CH1 as crate :: dma :: bdma :: sealed :: Channel > :: on_irq () ; } # [crate :: interrupt] unsafe fn DMA1_STREAM5 () { < crate :: peripherals :: DMA1_CH5 as crate :: dma :: dma :: sealed :: Channel > :: on_irq () ; } # [crate :: interrupt] unsafe fn DMA1_STREAM4 () { < crate :: peripherals :: DMA1_CH4 as crate :: dma :: dma :: sealed :: Channel > :: on_irq () ; } # [crate :: interrupt] unsafe fn BDMA_CHANNEL0 () { < crate :: peripherals :: BDMA_CH0 as crate :: dma :: bdma :: sealed :: Channel > :: on_irq () ; } # [crate :: interrupt] unsafe fn DMA2_STREAM0 () { < crate :: peripherals :: DMA2_CH0 as crate :: dma :: dma :: sealed :: Channel > :: on_irq () ; } # [crate :: interrupt] unsafe fn DMA2_STREAM3 () { < crate :: peripherals :: DMA2_CH3 as crate :: dma :: dma :: sealed :: Channel > :: on_irq () ; } # [crate :: interrupt] unsafe fn BDMA_CHANNEL7 () { < crate :: peripherals :: BDMA_CH7 as crate :: dma :: bdma :: sealed :: Channel > :: on_irq () ; } # [crate :: interrupt] unsafe fn DMA2_STREAM2 () { < crate :: peripherals :: DMA2_CH2 as crate :: dma :: dma :: sealed :: Channel > :: on_irq () ; } # [crate :: interrupt] unsafe fn DMA2_STREAM4 () { < crate :: peripherals :: DMA2_CH4 as crate :: dma :: dma :: sealed :: Channel > :: on_irq () ; } # [crate :: interrupt] unsafe fn BDMA_CHANNEL4 () { < crate :: peripherals :: BDMA_CH4 as crate :: dma :: bdma :: sealed :: Channel > :: on_irq () ; } # [crate :: interrupt] unsafe fn BDMA_CHANNEL2 () { < crate :: peripherals :: BDMA_CH2 as crate :: dma :: bdma :: sealed :: Channel > :: on_irq () ; } impl crate :: rcc :: sealed :: RccPeripheral for peripherals :: BDMA { fn frequency () -> crate :: time :: Hertz { critical_section :: with (| _ | unsafe { crate :: rcc :: get_freqs () . ahb4 }) } fn enable () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . ahb4enr () . modify (| w | w . set_bdmaen (true)) ; }) } fn disable () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . ahb4enr () . modify (| w | w . set_bdmaen (false)) ; }) } fn reset () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . ahb4rstr () . modify (| w | w . set_bdmarst (true)) ; crate :: pac :: RCC . ahb4rstr () . modify (| w | w . set_bdmarst (false)) ; }) ; } } impl crate :: rcc :: RccPeripheral for peripherals :: BDMA { } impl crate :: rcc :: sealed :: RccPeripheral for peripherals :: CRC { fn frequency () -> crate :: time :: Hertz { critical_section :: with (| _ | unsafe { crate :: rcc :: get_freqs () . ahb4 }) } fn enable () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . ahb4enr () . modify (| w | w . set_crcen (true)) ; }) } fn disable () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . ahb4enr () . modify (| w | w . set_crcen (false)) ; }) } fn reset () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . ahb4rstr () . modify (| w | w . set_crcrst (true)) ; crate :: pac :: RCC . ahb4rstr () . modify (| w | w . set_crcrst (false)) ; }) ; } } impl crate :: rcc :: RccPeripheral for peripherals :: CRC { } impl crate :: rcc :: sealed :: RccPeripheral for peripherals :: DCMI { fn frequency () -> crate :: time :: Hertz { critical_section :: with (| _ | unsafe { crate :: rcc :: get_freqs () . ahb2 }) } fn enable () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . ahb2enr () . modify (| w | w . set_dcmien (true)) ; }) } fn disable () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . ahb2enr () . modify (| w | w . set_dcmien (false)) ; }) } fn reset () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . ahb2rstr () . modify (| w | w . set_dcmirst (true)) ; crate :: pac :: RCC . ahb2rstr () . modify (| w | w . set_dcmirst (false)) ; }) ; } } impl crate :: rcc :: RccPeripheral for peripherals :: DCMI { } impl crate :: rcc :: sealed :: RccPeripheral for peripherals :: DMA1 { fn frequency () -> crate :: time :: Hertz { critical_section :: with (| _ | unsafe { crate :: rcc :: get_freqs () . ahb1 }) } fn enable () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . ahb1enr () . modify (| w | w . set_dma1en (true)) ; }) } fn disable () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . ahb1enr () . modify (| w | w . set_dma1en (false)) ; }) } fn reset () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . ahb1rstr () . modify (| w | w . set_dma1rst (true)) ; crate :: pac :: RCC . ahb1rstr () . modify (| w | w . set_dma1rst (false)) ; }) ; } } impl crate :: rcc :: RccPeripheral for peripherals :: DMA1 { } impl crate :: rcc :: sealed :: RccPeripheral for peripherals :: DMA2 { fn frequency () -> crate :: time :: Hertz { critical_section :: with (| _ | unsafe { crate :: rcc :: get_freqs () . ahb1 }) } fn enable () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . ahb1enr () . modify (| w | w . set_dma2en (true)) ; }) } fn disable () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . ahb1enr () . modify (| w | w . set_dma2en (false)) ; }) } fn reset () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . ahb1rstr () . modify (| w | w . set_dma2rst (true)) ; crate :: pac :: RCC . ahb1rstr () . modify (| w | w . set_dma2rst (false)) ; }) ; } } impl crate :: rcc :: RccPeripheral for peripherals :: DMA2 { } impl crate :: rcc :: sealed :: RccPeripheral for peripherals :: DMA2D { fn frequency () -> crate :: time :: Hertz { critical_section :: with (| _ | unsafe { crate :: rcc :: get_freqs () . ahb3 }) } fn enable () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . ahb3enr () . modify (| w | w . set_dma2den (true)) ; }) } fn disable () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . ahb3enr () . modify (| w | w . set_dma2den (false)) ; }) } fn reset () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . ahb3rstr () . modify (| w | w . set_dma2drst (true)) ; crate :: pac :: RCC . ahb3rstr () . modify (| w | w . set_dma2drst (false)) ; }) ; } } impl crate :: rcc :: RccPeripheral for peripherals :: DMA2D { } impl crate :: rcc :: sealed :: RccPeripheral for peripherals :: FMC { fn frequency () -> crate :: time :: Hertz { critical_section :: with (| _ | unsafe { crate :: rcc :: get_freqs () . ahb3 }) } fn enable () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . ahb3enr () . modify (| w | w . set_fmcen (true)) ; }) } fn disable () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . ahb3enr () . modify (| w | w . set_fmcen (false)) ; }) } fn reset () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . ahb3rstr () . modify (| w | w . set_fmcrst (true)) ; crate :: pac :: RCC . ahb3rstr () . modify (| w | w . set_fmcrst (false)) ; }) ; } } impl crate :: rcc :: RccPeripheral for peripherals :: FMC { } impl crate :: rcc :: sealed :: RccPeripheral for peripherals :: I2C1 { fn frequency () -> crate :: time :: Hertz { critical_section :: with (| _ | unsafe { crate :: rcc :: get_freqs () . apb1 }) } fn enable () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . apb1lenr () . modify (| w | w . set_i2c1en (true)) ; }) } fn disable () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . apb1lenr () . modify (| w | w . set_i2c1en (false)) ; }) } fn reset () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . apb1lrstr () . modify (| w | w . set_i2c1rst (true)) ; crate :: pac :: RCC . apb1lrstr () . modify (| w | w . set_i2c1rst (false)) ; }) ; } } impl crate :: rcc :: RccPeripheral for peripherals :: I2C1 { } impl crate :: rcc :: sealed :: RccPeripheral for peripherals :: I2C2 { fn frequency () -> crate :: time :: Hertz { critical_section :: with (| _ | unsafe { crate :: rcc :: get_freqs () . apb1 }) } fn enable () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . apb1lenr () . modify (| w | w . set_i2c2en (true)) ; }) } fn disable () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . apb1lenr () . modify (| w | w . set_i2c2en (false)) ; }) } fn reset () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . apb1lrstr () . modify (| w | w . set_i2c2rst (true)) ; crate :: pac :: RCC . apb1lrstr () . modify (| w | w . set_i2c2rst (false)) ; }) ; } } impl crate :: rcc :: RccPeripheral for peripherals :: I2C2 { } impl crate :: rcc :: sealed :: RccPeripheral for peripherals :: I2C3 { fn frequency () -> crate :: time :: Hertz { critical_section :: with (| _ | unsafe { crate :: rcc :: get_freqs () . apb1 }) } fn enable () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . apb1lenr () . modify (| w | w . set_i2c3en (true)) ; }) } fn disable () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . apb1lenr () . modify (| w | w . set_i2c3en (false)) ; }) } fn reset () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . apb1lrstr () . modify (| w | w . set_i2c3rst (true)) ; crate :: pac :: RCC . apb1lrstr () . modify (| w | w . set_i2c3rst (false)) ; }) ; } } impl crate :: rcc :: RccPeripheral for peripherals :: I2C3 { } impl crate :: rcc :: sealed :: RccPeripheral for peripherals :: I2C4 { fn frequency () -> crate :: time :: Hertz { critical_section :: with (| _ | unsafe { crate :: rcc :: get_freqs () . apb4 }) } fn enable () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . apb4enr () . modify (| w | w . set_i2c4en (true)) ; }) } fn disable () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . apb4enr () . modify (| w | w . set_i2c4en (false)) ; }) } fn reset () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . apb4rstr () . modify (| w | w . set_i2c4rst (true)) ; crate :: pac :: RCC . apb4rstr () . modify (| w | w . set_i2c4rst (false)) ; }) ; } } impl crate :: rcc :: RccPeripheral for peripherals :: I2C4 { } impl crate :: rcc :: sealed :: RccPeripheral for peripherals :: LPUART1 { fn frequency () -> crate :: time :: Hertz { critical_section :: with (| _ | unsafe { crate :: rcc :: get_freqs () . apb4 }) } fn enable () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . apb4enr () . modify (| w | w . set_lpuart1en (true)) ; }) } fn disable () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . apb4enr () . modify (| w | w . set_lpuart1en (false)) ; }) } fn reset () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . apb4rstr () . modify (| w | w . set_lpuart1rst (true)) ; crate :: pac :: RCC . apb4rstr () . modify (| w | w . set_lpuart1rst (false)) ; }) ; } } impl crate :: rcc :: RccPeripheral for peripherals :: LPUART1 { } impl crate :: rcc :: sealed :: RccPeripheral for peripherals :: MDIOS { fn frequency () -> crate :: time :: Hertz { critical_section :: with (| _ | unsafe { crate :: rcc :: get_freqs () . apb1 }) } fn enable () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . apb1henr () . modify (| w | w . set_mdiosen (true)) ; }) } fn disable () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . apb1henr () . modify (| w | w . set_mdiosen (false)) ; }) } fn reset () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . apb1hrstr () . modify (| w | w . set_mdiosrst (true)) ; crate :: pac :: RCC . apb1hrstr () . modify (| w | w . set_mdiosrst (false)) ; }) ; } } impl crate :: rcc :: RccPeripheral for peripherals :: MDIOS { } impl crate :: rcc :: sealed :: RccPeripheral for peripherals :: QUADSPI { fn frequency () -> crate :: time :: Hertz { critical_section :: with (| _ | unsafe { crate :: rcc :: get_freqs () . ahb3 }) } fn enable () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . ahb3enr () . modify (| w | w . set_quadspien (true)) ; }) } fn disable () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . ahb3enr () . modify (| w | w . set_quadspien (false)) ; }) } fn reset () { } } impl crate :: rcc :: RccPeripheral for peripherals :: QUADSPI { } impl crate :: rcc :: sealed :: RccPeripheral for peripherals :: RNG { fn frequency () -> crate :: time :: Hertz { critical_section :: with (| _ | unsafe { crate :: rcc :: get_freqs () . ahb2 }) } fn enable () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . ahb2enr () . modify (| w | w . set_rngen (true)) ; }) } fn disable () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . ahb2enr () . modify (| w | w . set_rngen (false)) ; }) } fn reset () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . ahb2rstr () . modify (| w | w . set_rngrst (true)) ; crate :: pac :: RCC . ahb2rstr () . modify (| w | w . set_rngrst (false)) ; }) ; } } impl crate :: rcc :: RccPeripheral for peripherals :: RNG { } impl crate :: rcc :: sealed :: RccPeripheral for peripherals :: SDMMC1 { fn frequency () -> crate :: time :: Hertz { critical_section :: with (| _ | unsafe { crate :: rcc :: get_freqs () . ahb3 }) } fn enable () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . ahb3enr () . modify (| w | w . set_sdmmc1en (true)) ; }) } fn disable () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . ahb3enr () . modify (| w | w . set_sdmmc1en (false)) ; }) } fn reset () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . ahb3rstr () . modify (| w | w . set_sdmmc1rst (true)) ; crate :: pac :: RCC . ahb3rstr () . modify (| w | w . set_sdmmc1rst (false)) ; }) ; } } impl crate :: rcc :: RccPeripheral for peripherals :: SDMMC1 { } impl crate :: rcc :: sealed :: RccPeripheral for peripherals :: SDMMC2 { fn frequency () -> crate :: time :: Hertz { critical_section :: with (| _ | unsafe { crate :: rcc :: get_freqs () . ahb2 }) } fn enable () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . ahb2enr () . modify (| w | w . set_sdmmc2en (true)) ; }) } fn disable () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . ahb2enr () . modify (| w | w . set_sdmmc2en (false)) ; }) } fn reset () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . ahb2rstr () . modify (| w | w . set_sdmmc2rst (true)) ; crate :: pac :: RCC . ahb2rstr () . modify (| w | w . set_sdmmc2rst (false)) ; }) ; } } impl crate :: rcc :: RccPeripheral for peripherals :: SDMMC2 { } impl crate :: rcc :: sealed :: RccPeripheral for peripherals :: SPI1 { fn frequency () -> crate :: time :: Hertz { critical_section :: with (| _ | unsafe { crate :: rcc :: get_freqs () . apb2 }) } fn enable () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . apb2enr () . modify (| w | w . set_spi1en (true)) ; }) } fn disable () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . apb2enr () . modify (| w | w . set_spi1en (false)) ; }) } fn reset () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . apb2rstr () . modify (| w | w . set_spi1rst (true)) ; crate :: pac :: RCC . apb2rstr () . modify (| w | w . set_spi1rst (false)) ; }) ; } } impl crate :: rcc :: RccPeripheral for peripherals :: SPI1 { } impl crate :: rcc :: sealed :: RccPeripheral for peripherals :: SPI2 { fn frequency () -> crate :: time :: Hertz { critical_section :: with (| _ | unsafe { crate :: rcc :: get_freqs () . apb1 }) } fn enable () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . apb1lenr () . modify (| w | w . set_spi2en (true)) ; }) } fn disable () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . apb1lenr () . modify (| w | w . set_spi2en (false)) ; }) } fn reset () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . apb1lrstr () . modify (| w | w . set_spi2rst (true)) ; crate :: pac :: RCC . apb1lrstr () . modify (| w | w . set_spi2rst (false)) ; }) ; } } impl crate :: rcc :: RccPeripheral for peripherals :: SPI2 { } impl crate :: rcc :: sealed :: RccPeripheral for peripherals :: SPI3 { fn frequency () -> crate :: time :: Hertz { critical_section :: with (| _ | unsafe { crate :: rcc :: get_freqs () . apb1 }) } fn enable () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . apb1lenr () . modify (| w | w . set_spi3en (true)) ; }) } fn disable () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . apb1lenr () . modify (| w | w . set_spi3en (false)) ; }) } fn reset () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . apb1lrstr () . modify (| w | w . set_spi3rst (true)) ; crate :: pac :: RCC . apb1lrstr () . modify (| w | w . set_spi3rst (false)) ; }) ; } } impl crate :: rcc :: RccPeripheral for peripherals :: SPI3 { } impl crate :: rcc :: sealed :: RccPeripheral for peripherals :: SPI4 { fn frequency () -> crate :: time :: Hertz { critical_section :: with (| _ | unsafe { crate :: rcc :: get_freqs () . apb2 }) } fn enable () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . apb2enr () . modify (| w | w . set_spi4en (true)) ; }) } fn disable () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . apb2enr () . modify (| w | w . set_spi4en (false)) ; }) } fn reset () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . apb2rstr () . modify (| w | w . set_spi4rst (true)) ; crate :: pac :: RCC . apb2rstr () . modify (| w | w . set_spi4rst (false)) ; }) ; } } impl crate :: rcc :: RccPeripheral for peripherals :: SPI4 { } impl crate :: rcc :: sealed :: RccPeripheral for peripherals :: SPI5 { fn frequency () -> crate :: time :: Hertz { critical_section :: with (| _ | unsafe { crate :: rcc :: get_freqs () . apb2 }) } fn enable () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . apb2enr () . modify (| w | w . set_spi5en (true)) ; }) } fn disable () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . apb2enr () . modify (| w | w . set_spi5en (false)) ; }) } fn reset () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . apb2rstr () . modify (| w | w . set_spi5rst (true)) ; crate :: pac :: RCC . apb2rstr () . modify (| w | w . set_spi5rst (false)) ; }) ; } } impl crate :: rcc :: RccPeripheral for peripherals :: SPI5 { } impl crate :: rcc :: sealed :: RccPeripheral for peripherals :: SPI6 { fn frequency () -> crate :: time :: Hertz { critical_section :: with (| _ | unsafe { crate :: rcc :: get_freqs () . apb4 }) } fn enable () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . apb4enr () . modify (| w | w . set_spi6en (true)) ; }) } fn disable () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . apb4enr () . modify (| w | w . set_spi6en (false)) ; }) } fn reset () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . apb4rstr () . modify (| w | w . set_spi6rst (true)) ; crate :: pac :: RCC . apb4rstr () . modify (| w | w . set_spi6rst (false)) ; }) ; } } impl crate :: rcc :: RccPeripheral for peripherals :: SPI6 { } impl crate :: rcc :: sealed :: RccPeripheral for peripherals :: SYSCFG { fn frequency () -> crate :: time :: Hertz { critical_section :: with (| _ | unsafe { crate :: rcc :: get_freqs () . apb4 }) } fn enable () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . apb4enr () . modify (| w | w . set_syscfgen (true)) ; }) } fn disable () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . apb4enr () . modify (| w | w . set_syscfgen (false)) ; }) } fn reset () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . apb4rstr () . modify (| w | w . set_syscfgrst (true)) ; crate :: pac :: RCC . apb4rstr () . modify (| w | w . set_syscfgrst (false)) ; }) ; } } impl crate :: rcc :: RccPeripheral for peripherals :: SYSCFG { } impl crate :: rcc :: sealed :: RccPeripheral for peripherals :: TIM1 { fn frequency () -> crate :: time :: Hertz { critical_section :: with (| _ | unsafe { crate :: rcc :: get_freqs () . apb2_tim }) } fn enable () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . apb2enr () . modify (| w | w . set_tim1en (true)) ; }) } fn disable () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . apb2enr () . modify (| w | w . set_tim1en (false)) ; }) } fn reset () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . apb2rstr () . modify (| w | w . set_tim1rst (true)) ; crate :: pac :: RCC . apb2rstr () . modify (| w | w . set_tim1rst (false)) ; }) ; } } impl crate :: rcc :: RccPeripheral for peripherals :: TIM1 { } impl crate :: rcc :: sealed :: RccPeripheral for peripherals :: TIM12 { fn frequency () -> crate :: time :: Hertz { critical_section :: with (| _ | unsafe { crate :: rcc :: get_freqs () . apb1_tim }) } fn enable () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . apb1lenr () . modify (| w | w . set_tim12en (true)) ; }) } fn disable () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . apb1lenr () . modify (| w | w . set_tim12en (false)) ; }) } fn reset () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . apb1lrstr () . modify (| w | w . set_tim12rst (true)) ; crate :: pac :: RCC . apb1lrstr () . modify (| w | w . set_tim12rst (false)) ; }) ; } } impl crate :: rcc :: RccPeripheral for peripherals :: TIM12 { } impl crate :: rcc :: sealed :: RccPeripheral for peripherals :: TIM13 { fn frequency () -> crate :: time :: Hertz { critical_section :: with (| _ | unsafe { crate :: rcc :: get_freqs () . apb1_tim }) } fn enable () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . apb1lenr () . modify (| w | w . set_tim13en (true)) ; }) } fn disable () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . apb1lenr () . modify (| w | w . set_tim13en (false)) ; }) } fn reset () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . apb1lrstr () . modify (| w | w . set_tim13rst (true)) ; crate :: pac :: RCC . apb1lrstr () . modify (| w | w . set_tim13rst (false)) ; }) ; } } impl crate :: rcc :: RccPeripheral for peripherals :: TIM13 { } impl crate :: rcc :: sealed :: RccPeripheral for peripherals :: TIM14 { fn frequency () -> crate :: time :: Hertz { critical_section :: with (| _ | unsafe { crate :: rcc :: get_freqs () . apb1_tim }) } fn enable () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . apb1lenr () . modify (| w | w . set_tim14en (true)) ; }) } fn disable () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . apb1lenr () . modify (| w | w . set_tim14en (false)) ; }) } fn reset () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . apb1lrstr () . modify (| w | w . set_tim14rst (true)) ; crate :: pac :: RCC . apb1lrstr () . modify (| w | w . set_tim14rst (false)) ; }) ; } } impl crate :: rcc :: RccPeripheral for peripherals :: TIM14 { } impl crate :: rcc :: sealed :: RccPeripheral for peripherals :: TIM15 { fn frequency () -> crate :: time :: Hertz { critical_section :: with (| _ | unsafe { crate :: rcc :: get_freqs () . apb2_tim }) } fn enable () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . apb2enr () . modify (| w | w . set_tim15en (true)) ; }) } fn disable () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . apb2enr () . modify (| w | w . set_tim15en (false)) ; }) } fn reset () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . apb2rstr () . modify (| w | w . set_tim15rst (true)) ; crate :: pac :: RCC . apb2rstr () . modify (| w | w . set_tim15rst (false)) ; }) ; } } impl crate :: rcc :: RccPeripheral for peripherals :: TIM15 { } impl crate :: rcc :: sealed :: RccPeripheral for peripherals :: TIM16 { fn frequency () -> crate :: time :: Hertz { critical_section :: with (| _ | unsafe { crate :: rcc :: get_freqs () . apb2_tim }) } fn enable () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . apb2enr () . modify (| w | w . set_tim16en (true)) ; }) } fn disable () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . apb2enr () . modify (| w | w . set_tim16en (false)) ; }) } fn reset () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . apb2rstr () . modify (| w | w . set_tim16rst (true)) ; crate :: pac :: RCC . apb2rstr () . modify (| w | w . set_tim16rst (false)) ; }) ; } } impl crate :: rcc :: RccPeripheral for peripherals :: TIM16 { } impl crate :: rcc :: sealed :: RccPeripheral for peripherals :: TIM17 { fn frequency () -> crate :: time :: Hertz { critical_section :: with (| _ | unsafe { crate :: rcc :: get_freqs () . apb2_tim }) } fn enable () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . apb2enr () . modify (| w | w . set_tim17en (true)) ; }) } fn disable () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . apb2enr () . modify (| w | w . set_tim17en (false)) ; }) } fn reset () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . apb2rstr () . modify (| w | w . set_tim17rst (true)) ; crate :: pac :: RCC . apb2rstr () . modify (| w | w . set_tim17rst (false)) ; }) ; } } impl crate :: rcc :: RccPeripheral for peripherals :: TIM17 { } impl crate :: rcc :: sealed :: RccPeripheral for peripherals :: TIM2 { fn frequency () -> crate :: time :: Hertz { critical_section :: with (| _ | unsafe { crate :: rcc :: get_freqs () . apb1_tim }) } fn enable () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . apb1lenr () . modify (| w | w . set_tim2en (true)) ; }) } fn disable () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . apb1lenr () . modify (| w | w . set_tim2en (false)) ; }) } fn reset () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . apb1lrstr () . modify (| w | w . set_tim2rst (true)) ; crate :: pac :: RCC . apb1lrstr () . modify (| w | w . set_tim2rst (false)) ; }) ; } } impl crate :: rcc :: RccPeripheral for peripherals :: TIM2 { } impl crate :: rcc :: sealed :: RccPeripheral for peripherals :: TIM3 { fn frequency () -> crate :: time :: Hertz { critical_section :: with (| _ | unsafe { crate :: rcc :: get_freqs () . apb1_tim }) } fn enable () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . apb1lenr () . modify (| w | w . set_tim3en (true)) ; }) } fn disable () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . apb1lenr () . modify (| w | w . set_tim3en (false)) ; }) } fn reset () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . apb1lrstr () . modify (| w | w . set_tim3rst (true)) ; crate :: pac :: RCC . apb1lrstr () . modify (| w | w . set_tim3rst (false)) ; }) ; } } impl crate :: rcc :: RccPeripheral for peripherals :: TIM3 { } impl crate :: rcc :: sealed :: RccPeripheral for peripherals :: TIM4 { fn frequency () -> crate :: time :: Hertz { critical_section :: with (| _ | unsafe { crate :: rcc :: get_freqs () . apb1_tim }) } fn enable () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . apb1lenr () . modify (| w | w . set_tim4en (true)) ; }) } fn disable () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . apb1lenr () . modify (| w | w . set_tim4en (false)) ; }) } fn reset () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . apb1lrstr () . modify (| w | w . set_tim4rst (true)) ; crate :: pac :: RCC . apb1lrstr () . modify (| w | w . set_tim4rst (false)) ; }) ; } } impl crate :: rcc :: RccPeripheral for peripherals :: TIM4 { } impl crate :: rcc :: sealed :: RccPeripheral for peripherals :: TIM5 { fn frequency () -> crate :: time :: Hertz { critical_section :: with (| _ | unsafe { crate :: rcc :: get_freqs () . apb1_tim }) } fn enable () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . apb1lenr () . modify (| w | w . set_tim5en (true)) ; }) } fn disable () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . apb1lenr () . modify (| w | w . set_tim5en (false)) ; }) } fn reset () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . apb1lrstr () . modify (| w | w . set_tim5rst (true)) ; crate :: pac :: RCC . apb1lrstr () . modify (| w | w . set_tim5rst (false)) ; }) ; } } impl crate :: rcc :: RccPeripheral for peripherals :: TIM5 { } impl crate :: rcc :: sealed :: RccPeripheral for peripherals :: TIM6 { fn frequency () -> crate :: time :: Hertz { critical_section :: with (| _ | unsafe { crate :: rcc :: get_freqs () . apb1_tim }) } fn enable () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . apb1lenr () . modify (| w | w . set_tim6en (true)) ; }) } fn disable () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . apb1lenr () . modify (| w | w . set_tim6en (false)) ; }) } fn reset () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . apb1lrstr () . modify (| w | w . set_tim6rst (true)) ; crate :: pac :: RCC . apb1lrstr () . modify (| w | w . set_tim6rst (false)) ; }) ; } } impl crate :: rcc :: RccPeripheral for peripherals :: TIM6 { } impl crate :: rcc :: sealed :: RccPeripheral for peripherals :: TIM7 { fn frequency () -> crate :: time :: Hertz { critical_section :: with (| _ | unsafe { crate :: rcc :: get_freqs () . apb1_tim }) } fn enable () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . apb1lenr () . modify (| w | w . set_tim7en (true)) ; }) } fn disable () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . apb1lenr () . modify (| w | w . set_tim7en (false)) ; }) } fn reset () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . apb1lrstr () . modify (| w | w . set_tim7rst (true)) ; crate :: pac :: RCC . apb1lrstr () . modify (| w | w . set_tim7rst (false)) ; }) ; } } impl crate :: rcc :: RccPeripheral for peripherals :: TIM7 { } impl crate :: rcc :: sealed :: RccPeripheral for peripherals :: TIM8 { fn frequency () -> crate :: time :: Hertz { critical_section :: with (| _ | unsafe { crate :: rcc :: get_freqs () . apb2_tim }) } fn enable () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . apb2enr () . modify (| w | w . set_tim8en (true)) ; }) } fn disable () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . apb2enr () . modify (| w | w . set_tim8en (false)) ; }) } fn reset () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . apb2rstr () . modify (| w | w . set_tim8rst (true)) ; crate :: pac :: RCC . apb2rstr () . modify (| w | w . set_tim8rst (false)) ; }) ; } } impl crate :: rcc :: RccPeripheral for peripherals :: TIM8 { } impl crate :: rcc :: sealed :: RccPeripheral for peripherals :: UART4 { fn frequency () -> crate :: time :: Hertz { critical_section :: with (| _ | unsafe { crate :: rcc :: get_freqs () . apb1 }) } fn enable () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . apb1lenr () . modify (| w | w . set_uart4en (true)) ; }) } fn disable () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . apb1lenr () . modify (| w | w . set_uart4en (false)) ; }) } fn reset () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . apb1lrstr () . modify (| w | w . set_uart4rst (true)) ; crate :: pac :: RCC . apb1lrstr () . modify (| w | w . set_uart4rst (false)) ; }) ; } } impl crate :: rcc :: RccPeripheral for peripherals :: UART4 { } impl crate :: rcc :: sealed :: RccPeripheral for peripherals :: UART5 { fn frequency () -> crate :: time :: Hertz { critical_section :: with (| _ | unsafe { crate :: rcc :: get_freqs () . apb1 }) } fn enable () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . apb1lenr () . modify (| w | w . set_uart5en (true)) ; }) } fn disable () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . apb1lenr () . modify (| w | w . set_uart5en (false)) ; }) } fn reset () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . apb1lrstr () . modify (| w | w . set_uart5rst (true)) ; crate :: pac :: RCC . apb1lrstr () . modify (| w | w . set_uart5rst (false)) ; }) ; } } impl crate :: rcc :: RccPeripheral for peripherals :: UART5 { } impl crate :: rcc :: sealed :: RccPeripheral for peripherals :: UART7 { fn frequency () -> crate :: time :: Hertz { critical_section :: with (| _ | unsafe { crate :: rcc :: get_freqs () . apb1 }) } fn enable () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . apb1lenr () . modify (| w | w . set_uart7en (true)) ; }) } fn disable () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . apb1lenr () . modify (| w | w . set_uart7en (false)) ; }) } fn reset () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . apb1lrstr () . modify (| w | w . set_uart7rst (true)) ; crate :: pac :: RCC . apb1lrstr () . modify (| w | w . set_uart7rst (false)) ; }) ; } } impl crate :: rcc :: RccPeripheral for peripherals :: UART7 { } impl crate :: rcc :: sealed :: RccPeripheral for peripherals :: UART8 { fn frequency () -> crate :: time :: Hertz { critical_section :: with (| _ | unsafe { crate :: rcc :: get_freqs () . apb1 }) } fn enable () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . apb1lenr () . modify (| w | w . set_uart8en (true)) ; }) } fn disable () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . apb1lenr () . modify (| w | w . set_uart8en (false)) ; }) } fn reset () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . apb1lrstr () . modify (| w | w . set_uart8rst (true)) ; crate :: pac :: RCC . apb1lrstr () . modify (| w | w . set_uart8rst (false)) ; }) ; } } impl crate :: rcc :: RccPeripheral for peripherals :: UART8 { } impl crate :: rcc :: sealed :: RccPeripheral for peripherals :: USART1 { fn frequency () -> crate :: time :: Hertz { critical_section :: with (| _ | unsafe { crate :: rcc :: get_freqs () . apb2 }) } fn enable () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . apb2enr () . modify (| w | w . set_usart1en (true)) ; }) } fn disable () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . apb2enr () . modify (| w | w . set_usart1en (false)) ; }) } fn reset () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . apb2rstr () . modify (| w | w . set_usart1rst (true)) ; crate :: pac :: RCC . apb2rstr () . modify (| w | w . set_usart1rst (false)) ; }) ; } } impl crate :: rcc :: RccPeripheral for peripherals :: USART1 { } impl crate :: rcc :: sealed :: RccPeripheral for peripherals :: USART2 { fn frequency () -> crate :: time :: Hertz { critical_section :: with (| _ | unsafe { crate :: rcc :: get_freqs () . apb1 }) } fn enable () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . apb1lenr () . modify (| w | w . set_usart2en (true)) ; }) } fn disable () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . apb1lenr () . modify (| w | w . set_usart2en (false)) ; }) } fn reset () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . apb1lrstr () . modify (| w | w . set_usart2rst (true)) ; crate :: pac :: RCC . apb1lrstr () . modify (| w | w . set_usart2rst (false)) ; }) ; } } impl crate :: rcc :: RccPeripheral for peripherals :: USART2 { } impl crate :: rcc :: sealed :: RccPeripheral for peripherals :: USART3 { fn frequency () -> crate :: time :: Hertz { critical_section :: with (| _ | unsafe { crate :: rcc :: get_freqs () . apb1 }) } fn enable () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . apb1lenr () . modify (| w | w . set_usart3en (true)) ; }) } fn disable () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . apb1lenr () . modify (| w | w . set_usart3en (false)) ; }) } fn reset () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . apb1lrstr () . modify (| w | w . set_usart3rst (true)) ; crate :: pac :: RCC . apb1lrstr () . modify (| w | w . set_usart3rst (false)) ; }) ; } } impl crate :: rcc :: RccPeripheral for peripherals :: USART3 { } impl crate :: rcc :: sealed :: RccPeripheral for peripherals :: USART6 { fn frequency () -> crate :: time :: Hertz { critical_section :: with (| _ | unsafe { crate :: rcc :: get_freqs () . apb2 }) } fn enable () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . apb2enr () . modify (| w | w . set_usart6en (true)) ; }) } fn disable () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . apb2enr () . modify (| w | w . set_usart6en (false)) ; }) } fn reset () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . apb2rstr () . modify (| w | w . set_usart6rst (true)) ; crate :: pac :: RCC . apb2rstr () . modify (| w | w . set_usart6rst (false)) ; }) ; } } impl crate :: rcc :: RccPeripheral for peripherals :: USART6 { } impl crate :: rcc :: sealed :: RccPeripheral for peripherals :: USB_OTG_FS { fn frequency () -> crate :: time :: Hertz { critical_section :: with (| _ | unsafe { crate :: rcc :: get_freqs () . ahb1 }) } fn enable () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . ahb1enr () . modify (| w | w . set_usb_otg_fsen (true)) ; }) } fn disable () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . ahb1enr () . modify (| w | w . set_usb_otg_fsen (false)) ; }) } fn reset () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . ahb1rstr () . modify (| w | w . set_usb_otg_fsrst (true)) ; crate :: pac :: RCC . ahb1rstr () . modify (| w | w . set_usb_otg_fsrst (false)) ; }) ; } } impl crate :: rcc :: RccPeripheral for peripherals :: USB_OTG_FS { } impl crate :: rcc :: sealed :: RccPeripheral for peripherals :: USB_OTG_HS { fn frequency () -> crate :: time :: Hertz { critical_section :: with (| _ | unsafe { crate :: rcc :: get_freqs () . ahb1 }) } fn enable () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . ahb1enr () . modify (| w | w . set_usb_otg_hsen (true)) ; }) } fn disable () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . ahb1enr () . modify (| w | w . set_usb_otg_hsen (false)) ; }) } fn reset () { critical_section :: with (| _ | unsafe { crate :: pac :: RCC . ahb1rstr () . modify (| w | w . set_usb_otg_hsrst (true)) ; crate :: pac :: RCC . ahb1rstr () . modify (| w | w . set_usb_otg_hsrst (false)) ; }) ; } } impl crate :: rcc :: RccPeripheral for peripherals :: USB_OTG_HS { } pub unsafe fn init_dma () { crate :: pac :: RCC . ahb1enr () . modify (| w | w . set_dma1en (true)) ; crate :: pac :: RCC . ahb1enr () . modify (| w | w . set_dma2en (true)) ; } pub unsafe fn init_bdma () { crate :: pac :: RCC . ahb4enr () . modify (| w | w . set_bdmaen (true)) ; } pub unsafe fn init_dmamux () { } pub unsafe fn init_gpdma () { } pub unsafe fn init_gpio () { crate :: pac :: RCC . ahb4enr () . modify (| w | w . set_gpioaen (true)) ; crate :: pac :: RCC . ahb4enr () . modify (| w | w . set_gpioben (true)) ; crate :: pac :: RCC . ahb4enr () . modify (| w | w . set_gpiocen (true)) ; crate :: pac :: RCC . ahb4enr () . modify (| w | w . set_gpioden (true)) ; crate :: pac :: RCC . ahb4enr () . modify (| w | w . set_gpioeen (true)) ; crate :: pac :: RCC . ahb4enr () . modify (| w | w . set_gpiofen (true)) ; crate :: pac :: RCC . ahb4enr () . modify (| w | w . set_gpiogen (true)) ; crate :: pac :: RCC . ahb4enr () . modify (| w | w . set_gpiohen (true)) ; crate :: pac :: RCC . ahb4enr () . modify (| w | w . set_gpioien (true)) ; crate :: pac :: RCC . ahb4enr () . modify (| w | w . set_gpiojen (true)) ; crate :: pac :: RCC . ahb4enr () . modify (| w | w . set_gpioken (true)) ; } impl_adc_pin ! (ADC1 , PA0 , 16u8) ; impl_adc_pin ! (ADC1 , PA1 , 17u8) ; impl_adc_pin ! (ADC1 , PA2 , 14u8) ; impl_adc_pin ! (ADC1 , PA3 , 15u8) ; impl_adc_pin ! (ADC1 , PA4 , 18u8) ; impl_adc_pin ! (ADC1 , PA5 , 19u8) ; impl_adc_pin ! (ADC1 , PA6 , 3u8) ; impl_adc_pin ! (ADC1 , PA7 , 7u8) ; impl_adc_pin ! (ADC1 , PB0 , 9u8) ; impl_adc_pin ! (ADC1 , PB1 , 5u8) ; impl_adc_pin ! (ADC1 , PC0 , 10u8) ; impl_adc_pin ! (ADC1 , PC1 , 11u8) ; impl_adc_pin ! (ADC1 , PC4 , 4u8) ; impl_adc_pin ! (ADC1 , PC5 , 8u8) ; impl_adc_pin ! (ADC1 , PF11 , 2u8) ; impl_adc_pin ! (ADC1 , PF12 , 6u8) ; impl_adc_pin ! (ADC2 , PA2 , 14u8) ; impl_adc_pin ! (ADC2 , PA3 , 15u8) ; impl_adc_pin ! (ADC2 , PA4 , 18u8) ; impl_adc_pin ! (ADC2 , PA5 , 19u8) ; impl_adc_pin ! (ADC2 , PA6 , 3u8) ; impl_adc_pin ! (ADC2 , PA7 , 7u8) ; impl_adc_pin ! (ADC2 , PB0 , 9u8) ; impl_adc_pin ! (ADC2 , PB1 , 5u8) ; impl_adc_pin ! (ADC2 , PC0 , 10u8) ; impl_adc_pin ! (ADC2 , PC1 , 11u8) ; impl_adc_pin ! (ADC2 , PC4 , 4u8) ; impl_adc_pin ! (ADC2 , PC5 , 8u8) ; impl_adc_pin ! (ADC2 , PF13 , 2u8) ; impl_adc_pin ! (ADC2 , PF14 , 6u8) ; impl_adc_pin ! (ADC3 , PC0 , 10u8) ; impl_adc_pin ! (ADC3 , PC1 , 11u8) ; impl_adc_pin ! (ADC3 , PF3 , 5u8) ; impl_adc_pin ! (ADC3 , PF4 , 9u8) ; impl_adc_pin ! (ADC3 , PF5 , 4u8) ; impl_adc_pin ! (ADC3 , PF6 , 8u8) ; impl_adc_pin ! (ADC3 , PF7 , 3u8) ; impl_adc_pin ! (ADC3 , PF8 , 7u8) ; impl_adc_pin ! (ADC3 , PF9 , 2u8) ; impl_adc_pin ! (ADC3 , PF10 , 6u8) ; impl_adc_pin ! (ADC3 , PH2 , 13u8) ; impl_adc_pin ! (ADC3 , PH3 , 14u8) ; impl_adc_pin ! (ADC3 , PH4 , 15u8) ; impl_adc_pin ! (ADC3 , PH5 , 16u8) ; impl_dac_pin ! (DAC1 , PA4 , 1u8) ; impl_dac_pin ! (DAC1 , PA5 , 2u8) ; pin_trait_impl ! (crate :: dcmi :: HSyncPin , DCMI , PA4 , 13u8) ; pin_trait_impl ! (crate :: dcmi :: PixClkPin , DCMI , PA6 , 13u8) ; pin_trait_impl ! (crate :: dcmi :: D0Pin , DCMI , PA9 , 13u8) ; pin_trait_impl ! (crate :: dcmi :: D1Pin , DCMI , PA10 , 13u8) ; pin_trait_impl ! (crate :: dcmi :: D10Pin , DCMI , PB5 , 13u8) ; pin_trait_impl ! (crate :: dcmi :: D5Pin , DCMI , PB6 , 13u8) ; pin_trait_impl ! (crate :: dcmi :: VSyncPin , DCMI , PB7 , 13u8) ; pin_trait_impl ! (crate :: dcmi :: D6Pin , DCMI , PB8 , 13u8) ; pin_trait_impl ! (crate :: dcmi :: D7Pin , DCMI , PB9 , 13u8) ; pin_trait_impl ! (crate :: dcmi :: D0Pin , DCMI , PC6 , 13u8) ; pin_trait_impl ! (crate :: dcmi :: D1Pin , DCMI , PC7 , 13u8) ; pin_trait_impl ! (crate :: dcmi :: D2Pin , DCMI , PC8 , 13u8) ; pin_trait_impl ! (crate :: dcmi :: D3Pin , DCMI , PC9 , 13u8) ; pin_trait_impl ! (crate :: dcmi :: D8Pin , DCMI , PC10 , 13u8) ; pin_trait_impl ! (crate :: dcmi :: D4Pin , DCMI , PC11 , 13u8) ; pin_trait_impl ! (crate :: dcmi :: D9Pin , DCMI , PC12 , 13u8) ; pin_trait_impl ! (crate :: dcmi :: D11Pin , DCMI , PD2 , 13u8) ; pin_trait_impl ! (crate :: dcmi :: D5Pin , DCMI , PD3 , 13u8) ; pin_trait_impl ! (crate :: dcmi :: D10Pin , DCMI , PD6 , 13u8) ; pin_trait_impl ! (crate :: dcmi :: D2Pin , DCMI , PE0 , 13u8) ; pin_trait_impl ! (crate :: dcmi :: D3Pin , DCMI , PE1 , 13u8) ; pin_trait_impl ! (crate :: dcmi :: D4Pin , DCMI , PE4 , 13u8) ; pin_trait_impl ! (crate :: dcmi :: D6Pin , DCMI , PE5 , 13u8) ; pin_trait_impl ! (crate :: dcmi :: D7Pin , DCMI , PE6 , 13u8) ; pin_trait_impl ! (crate :: dcmi :: D11Pin , DCMI , PF10 , 13u8) ; pin_trait_impl ! (crate :: dcmi :: D12Pin , DCMI , PF11 , 13u8) ; pin_trait_impl ! (crate :: dcmi :: D12Pin , DCMI , PG6 , 13u8) ; pin_trait_impl ! (crate :: dcmi :: D13Pin , DCMI , PG7 , 13u8) ; pin_trait_impl ! (crate :: dcmi :: VSyncPin , DCMI , PG9 , 13u8) ; pin_trait_impl ! (crate :: dcmi :: D2Pin , DCMI , PG10 , 13u8) ; pin_trait_impl ! (crate :: dcmi :: D3Pin , DCMI , PG11 , 13u8) ; pin_trait_impl ! (crate :: dcmi :: D13Pin , DCMI , PG15 , 13u8) ; pin_trait_impl ! (crate :: dcmi :: D8Pin , DCMI , PH6 , 13u8) ; pin_trait_impl ! (crate :: dcmi :: D9Pin , DCMI , PH7 , 13u8) ; pin_trait_impl ! (crate :: dcmi :: HSyncPin , DCMI , PH8 , 13u8) ; pin_trait_impl ! (crate :: dcmi :: D0Pin , DCMI , PH9 , 13u8) ; pin_trait_impl ! (crate :: dcmi :: D1Pin , DCMI , PH10 , 13u8) ; pin_trait_impl ! (crate :: dcmi :: D2Pin , DCMI , PH11 , 13u8) ; pin_trait_impl ! (crate :: dcmi :: D3Pin , DCMI , PH12 , 13u8) ; pin_trait_impl ! (crate :: dcmi :: D4Pin , DCMI , PH14 , 13u8) ; pin_trait_impl ! (crate :: dcmi :: D11Pin , DCMI , PH15 , 13u8) ; pin_trait_impl ! (crate :: dcmi :: D13Pin , DCMI , PI0 , 13u8) ; pin_trait_impl ! (crate :: dcmi :: D8Pin , DCMI , PI1 , 13u8) ; pin_trait_impl ! (crate :: dcmi :: D9Pin , DCMI , PI2 , 13u8) ; pin_trait_impl ! (crate :: dcmi :: D10Pin , DCMI , PI3 , 13u8) ; pin_trait_impl ! (crate :: dcmi :: D5Pin , DCMI , PI4 , 13u8) ; pin_trait_impl ! (crate :: dcmi :: VSyncPin , DCMI , PI5 , 13u8) ; pin_trait_impl ! (crate :: dcmi :: D6Pin , DCMI , PI6 , 13u8) ; pin_trait_impl ! (crate :: dcmi :: D7Pin , DCMI , PI7 , 13u8) ; pin_trait_impl ! (crate :: eth :: RefClkPin , ETH , PA1 , 11u8) ; pin_trait_impl ! (crate :: eth :: MDIOPin , ETH , PA2 , 11u8) ; pin_trait_impl ! (crate :: eth :: CRSPin , ETH , PA7 , 11u8) ; pin_trait_impl ! (crate :: eth :: TXEnPin , ETH , PB11 , 11u8) ; pin_trait_impl ! (crate :: eth :: TXD0Pin , ETH , PB12 , 11u8) ; pin_trait_impl ! (crate :: eth :: TXD1Pin , ETH , PB13 , 11u8) ; pin_trait_impl ! (crate :: eth :: MDCPin , ETH , PC1 , 11u8) ; pin_trait_impl ! (crate :: eth :: RXD0Pin , ETH , PC4 , 11u8) ; pin_trait_impl ! (crate :: eth :: RXD1Pin , ETH , PC5 , 11u8) ; pin_trait_impl ! (crate :: eth :: TXEnPin , ETH , PG11 , 11u8) ; pin_trait_impl ! (crate :: eth :: TXD1Pin , ETH , PG12 , 11u8) ; pin_trait_impl ! (crate :: eth :: TXD0Pin , ETH , PG13 , 11u8) ; pin_trait_impl ! (crate :: eth :: TXD1Pin , ETH , PG14 , 11u8) ; pin_trait_impl ! (crate :: fmc :: SDNWEPin , FMC , PA7 , 12u8) ; pin_trait_impl ! (crate :: fmc :: SDCKE1Pin , FMC , PB5 , 12u8) ; pin_trait_impl ! (crate :: fmc :: SDNE1Pin , FMC , PB6 , 12u8) ; pin_trait_impl ! (crate :: fmc :: NLPin , FMC , PB7 , 12u8) ; pin_trait_impl ! (crate :: fmc :: SDNWEPin , FMC , PC0 , 12u8) ; pin_trait_impl ! (crate :: fmc :: SDNE0Pin , FMC , PC4 , 12u8) ; pin_trait_impl ! (crate :: fmc :: SDCKE0Pin , FMC , PC5 , 12u8) ; pin_trait_impl ! (crate :: fmc :: NWaitPin , FMC , PC6 , 9u8) ; pin_trait_impl ! (crate :: fmc :: NE1Pin , FMC , PC7 , 9u8) ; pin_trait_impl ! (crate :: fmc :: NCEPin , FMC , PC8 , 9u8) ; pin_trait_impl ! (crate :: fmc :: NE2Pin , FMC , PC8 , 9u8) ; pin_trait_impl ! (crate :: fmc :: D2Pin , FMC , PD0 , 12u8) ; pin_trait_impl ! (crate :: fmc :: DA2Pin , FMC , PD0 , 12u8) ; pin_trait_impl ! (crate :: fmc :: D3Pin , FMC , PD1 , 12u8) ; pin_trait_impl ! (crate :: fmc :: DA3Pin , FMC , PD1 , 12u8) ; pin_trait_impl ! (crate :: fmc :: NOEPin , FMC , PD4 , 12u8) ; pin_trait_impl ! (crate :: fmc :: NWEPin , FMC , PD5 , 12u8) ; pin_trait_impl ! (crate :: fmc :: NWaitPin , FMC , PD6 , 12u8) ; pin_trait_impl ! (crate :: fmc :: NE1Pin , FMC , PD7 , 12u8) ; pin_trait_impl ! (crate :: fmc :: D13Pin , FMC , PD8 , 12u8) ; pin_trait_impl ! (crate :: fmc :: DA13Pin , FMC , PD8 , 12u8) ; pin_trait_impl ! (crate :: fmc :: D14Pin , FMC , PD9 , 12u8) ; pin_trait_impl ! (crate :: fmc :: DA14Pin , FMC , PD9 , 12u8) ; pin_trait_impl ! (crate :: fmc :: D15Pin , FMC , PD10 , 12u8) ; pin_trait_impl ! (crate :: fmc :: DA15Pin , FMC , PD10 , 12u8) ; pin_trait_impl ! (crate :: fmc :: A16Pin , FMC , PD11 , 12u8) ; pin_trait_impl ! (crate :: fmc :: A17Pin , FMC , PD12 , 12u8) ; pin_trait_impl ! (crate :: fmc :: A18Pin , FMC , PD13 , 12u8) ; pin_trait_impl ! (crate :: fmc :: D0Pin , FMC , PD14 , 12u8) ; pin_trait_impl ! (crate :: fmc :: DA0Pin , FMC , PD14 , 12u8) ; pin_trait_impl ! (crate :: fmc :: D1Pin , FMC , PD15 , 12u8) ; pin_trait_impl ! (crate :: fmc :: DA1Pin , FMC , PD15 , 12u8) ; pin_trait_impl ! (crate :: fmc :: NBL0Pin , FMC , PE0 , 12u8) ; pin_trait_impl ! (crate :: fmc :: NBL1Pin , FMC , PE1 , 12u8) ; pin_trait_impl ! (crate :: fmc :: A23Pin , FMC , PE2 , 12u8) ; pin_trait_impl ! (crate :: fmc :: A19Pin , FMC , PE3 , 12u8) ; pin_trait_impl ! (crate :: fmc :: A20Pin , FMC , PE4 , 12u8) ; pin_trait_impl ! (crate :: fmc :: A21Pin , FMC , PE5 , 12u8) ; pin_trait_impl ! (crate :: fmc :: A22Pin , FMC , PE6 , 12u8) ; pin_trait_impl ! (crate :: fmc :: D4Pin , FMC , PE7 , 12u8) ; pin_trait_impl ! (crate :: fmc :: DA4Pin , FMC , PE7 , 12u8) ; pin_trait_impl ! (crate :: fmc :: D5Pin , FMC , PE8 , 12u8) ; pin_trait_impl ! (crate :: fmc :: DA5Pin , FMC , PE8 , 12u8) ; pin_trait_impl ! (crate :: fmc :: D6Pin , FMC , PE9 , 12u8) ; pin_trait_impl ! (crate :: fmc :: DA6Pin , FMC , PE9 , 12u8) ; pin_trait_impl ! (crate :: fmc :: D7Pin , FMC , PE10 , 12u8) ; pin_trait_impl ! (crate :: fmc :: DA7Pin , FMC , PE10 , 12u8) ; pin_trait_impl ! (crate :: fmc :: D8Pin , FMC , PE11 , 12u8) ; pin_trait_impl ! (crate :: fmc :: DA8Pin , FMC , PE11 , 12u8) ; pin_trait_impl ! (crate :: fmc :: D9Pin , FMC , PE12 , 12u8) ; pin_trait_impl ! (crate :: fmc :: DA9Pin , FMC , PE12 , 12u8) ; pin_trait_impl ! (crate :: fmc :: D10Pin , FMC , PE13 , 12u8) ; pin_trait_impl ! (crate :: fmc :: DA10Pin , FMC , PE13 , 12u8) ; pin_trait_impl ! (crate :: fmc :: D11Pin , FMC , PE14 , 12u8) ; pin_trait_impl ! (crate :: fmc :: DA11Pin , FMC , PE14 , 12u8) ; pin_trait_impl ! (crate :: fmc :: D12Pin , FMC , PE15 , 12u8) ; pin_trait_impl ! (crate :: fmc :: DA12Pin , FMC , PE15 , 12u8) ; pin_trait_impl ! (crate :: fmc :: A0Pin , FMC , PF0 , 12u8) ; pin_trait_impl ! (crate :: fmc :: A1Pin , FMC , PF1 , 12u8) ; pin_trait_impl ! (crate :: fmc :: A2Pin , FMC , PF2 , 12u8) ; pin_trait_impl ! (crate :: fmc :: A3Pin , FMC , PF3 , 12u8) ; pin_trait_impl ! (crate :: fmc :: A4Pin , FMC , PF4 , 12u8) ; pin_trait_impl ! (crate :: fmc :: A5Pin , FMC , PF5 , 12u8) ; pin_trait_impl ! (crate :: fmc :: SDNRASPin , FMC , PF11 , 12u8) ; pin_trait_impl ! (crate :: fmc :: A6Pin , FMC , PF12 , 12u8) ; pin_trait_impl ! (crate :: fmc :: A7Pin , FMC , PF13 , 12u8) ; pin_trait_impl ! (crate :: fmc :: A8Pin , FMC , PF14 , 12u8) ; pin_trait_impl ! (crate :: fmc :: A9Pin , FMC , PF15 , 12u8) ; pin_trait_impl ! (crate :: fmc :: A10Pin , FMC , PG0 , 12u8) ; pin_trait_impl ! (crate :: fmc :: A11Pin , FMC , PG1 , 12u8) ; pin_trait_impl ! (crate :: fmc :: A12Pin , FMC , PG2 , 12u8) ; pin_trait_impl ! (crate :: fmc :: A13Pin , FMC , PG3 , 12u8) ; pin_trait_impl ! (crate :: fmc :: A14Pin , FMC , PG4 , 12u8) ; pin_trait_impl ! (crate :: fmc :: BA0Pin , FMC , PG4 , 12u8) ; pin_trait_impl ! (crate :: fmc :: A15Pin , FMC , PG5 , 12u8) ; pin_trait_impl ! (crate :: fmc :: BA1Pin , FMC , PG5 , 12u8) ; pin_trait_impl ! (crate :: fmc :: NE3Pin , FMC , PG6 , 12u8) ; pin_trait_impl ! (crate :: fmc :: INTPin , FMC , PG7 , 12u8) ; pin_trait_impl ! (crate :: fmc :: SDCLKPin , FMC , PG8 , 12u8) ; pin_trait_impl ! (crate :: fmc :: NCEPin , FMC , PG9 , 12u8) ; pin_trait_impl ! (crate :: fmc :: NE2Pin , FMC , PG9 , 12u8) ; pin_trait_impl ! (crate :: fmc :: NE3Pin , FMC , PG10 , 12u8) ; pin_trait_impl ! (crate :: fmc :: NE4Pin , FMC , PG12 , 12u8) ; pin_trait_impl ! (crate :: fmc :: A24Pin , FMC , PG13 , 12u8) ; pin_trait_impl ! (crate :: fmc :: A25Pin , FMC , PG14 , 12u8) ; pin_trait_impl ! (crate :: fmc :: SDNCASPin , FMC , PG15 , 12u8) ; pin_trait_impl ! (crate :: fmc :: SDCKE0Pin , FMC , PH2 , 12u8) ; pin_trait_impl ! (crate :: fmc :: SDNE0Pin , FMC , PH3 , 12u8) ; pin_trait_impl ! (crate :: fmc :: SDNWEPin , FMC , PH5 , 12u8) ; pin_trait_impl ! (crate :: fmc :: SDNE1Pin , FMC , PH6 , 12u8) ; pin_trait_impl ! (crate :: fmc :: SDCKE1Pin , FMC , PH7 , 12u8) ; pin_trait_impl ! (crate :: fmc :: D16Pin , FMC , PH8 , 12u8) ; pin_trait_impl ! (crate :: fmc :: D17Pin , FMC , PH9 , 12u8) ; pin_trait_impl ! (crate :: fmc :: D18Pin , FMC , PH10 , 12u8) ; pin_trait_impl ! (crate :: fmc :: D19Pin , FMC , PH11 , 12u8) ; pin_trait_impl ! (crate :: fmc :: D20Pin , FMC , PH12 , 12u8) ; pin_trait_impl ! (crate :: fmc :: D21Pin , FMC , PH13 , 12u8) ; pin_trait_impl ! (crate :: fmc :: D22Pin , FMC , PH14 , 12u8) ; pin_trait_impl ! (crate :: fmc :: D23Pin , FMC , PH15 , 12u8) ; pin_trait_impl ! (crate :: fmc :: D24Pin , FMC , PI0 , 12u8) ; pin_trait_impl ! (crate :: fmc :: D25Pin , FMC , PI1 , 12u8) ; pin_trait_impl ! (crate :: fmc :: D26Pin , FMC , PI2 , 12u8) ; pin_trait_impl ! (crate :: fmc :: D27Pin , FMC , PI3 , 12u8) ; pin_trait_impl ! (crate :: fmc :: NBL2Pin , FMC , PI4 , 12u8) ; pin_trait_impl ! (crate :: fmc :: NBL3Pin , FMC , PI5 , 12u8) ; pin_trait_impl ! (crate :: fmc :: D28Pin , FMC , PI6 , 12u8) ; pin_trait_impl ! (crate :: fmc :: D29Pin , FMC , PI7 , 12u8) ; pin_trait_impl ! (crate :: fmc :: D30Pin , FMC , PI9 , 12u8) ; pin_trait_impl ! (crate :: fmc :: D31Pin , FMC , PI10 , 12u8) ; pin_trait_impl ! (crate :: i2c :: SclPin , I2C1 , PB6 , 4u8) ; pin_trait_impl ! (crate :: i2c :: SdaPin , I2C1 , PB7 , 4u8) ; pin_trait_impl ! (crate :: i2c :: SclPin , I2C1 , PB8 , 4u8) ; pin_trait_impl ! (crate :: i2c :: SdaPin , I2C1 , PB9 , 4u8) ; pin_trait_impl ! (crate :: i2c :: SclPin , I2C2 , PB10 , 4u8) ; pin_trait_impl ! (crate :: i2c :: SdaPin , I2C2 , PB11 , 4u8) ; pin_trait_impl ! (crate :: i2c :: SdaPin , I2C2 , PF0 , 4u8) ; pin_trait_impl ! (crate :: i2c :: SclPin , I2C2 , PF1 , 4u8) ; pin_trait_impl ! (crate :: i2c :: SclPin , I2C2 , PH4 , 4u8) ; pin_trait_impl ! (crate :: i2c :: SdaPin , I2C2 , PH5 , 4u8) ; pin_trait_impl ! (crate :: i2c :: SclPin , I2C3 , PA8 , 4u8) ; pin_trait_impl ! (crate :: i2c :: SdaPin , I2C3 , PC9 , 4u8) ; pin_trait_impl ! (crate :: i2c :: SclPin , I2C3 , PH7 , 4u8) ; pin_trait_impl ! (crate :: i2c :: SdaPin , I2C3 , PH8 , 4u8) ; pin_trait_impl ! (crate :: i2c :: SclPin , I2C4 , PB6 , 6u8) ; pin_trait_impl ! (crate :: i2c :: SdaPin , I2C4 , PB7 , 6u8) ; pin_trait_impl ! (crate :: i2c :: SclPin , I2C4 , PB8 , 6u8) ; pin_trait_impl ! (crate :: i2c :: SdaPin , I2C4 , PB9 , 6u8) ; pin_trait_impl ! (crate :: i2c :: SclPin , I2C4 , PD12 , 4u8) ; pin_trait_impl ! (crate :: i2c :: SdaPin , I2C4 , PD13 , 4u8) ; pin_trait_impl ! (crate :: i2c :: SclPin , I2C4 , PF14 , 4u8) ; pin_trait_impl ! (crate :: i2c :: SdaPin , I2C4 , PF15 , 4u8) ; pin_trait_impl ! (crate :: i2c :: SclPin , I2C4 , PH11 , 4u8) ; pin_trait_impl ! (crate :: i2c :: SdaPin , I2C4 , PH12 , 4u8) ; pin_trait_impl ! (crate :: usart :: TxPin , LPUART1 , PA9 , 3u8) ; pin_trait_impl ! (crate :: usart :: RxPin , LPUART1 , PA10 , 3u8) ; pin_trait_impl ! (crate :: usart :: CtsPin , LPUART1 , PA11 , 3u8) ; pin_trait_impl ! (crate :: usart :: DePin , LPUART1 , PA12 , 3u8) ; pin_trait_impl ! (crate :: usart :: RtsPin , LPUART1 , PA12 , 3u8) ; pin_trait_impl ! (crate :: usart :: TxPin , LPUART1 , PB6 , 8u8) ; pin_trait_impl ! (crate :: usart :: RxPin , LPUART1 , PB7 , 8u8) ; pin_trait_impl ! (crate :: qspi :: D3Pin , QUADSPI , PA1 , 9u8) ; pin_trait_impl ! (crate :: qspi :: SckPin , QUADSPI , PB2 , 9u8) ; pin_trait_impl ! (crate :: qspi :: NSSPin , QUADSPI , PB6 , 10u8) ; pin_trait_impl ! (crate :: qspi :: NSSPin , QUADSPI , PB10 , 9u8) ; pin_trait_impl ! (crate :: qspi :: D0Pin , QUADSPI , PC9 , 9u8) ; pin_trait_impl ! (crate :: qspi :: D1Pin , QUADSPI , PC10 , 9u8) ; pin_trait_impl ! (crate :: qspi :: D0Pin , QUADSPI , PD11 , 9u8) ; pin_trait_impl ! (crate :: qspi :: D1Pin , QUADSPI , PD12 , 9u8) ; pin_trait_impl ! (crate :: qspi :: D3Pin , QUADSPI , PD13 , 9u8) ; pin_trait_impl ! (crate :: qspi :: D2Pin , QUADSPI , PE2 , 9u8) ; pin_trait_impl ! (crate :: qspi :: D3Pin , QUADSPI , PF6 , 9u8) ; pin_trait_impl ! (crate :: qspi :: D2Pin , QUADSPI , PF7 , 9u8) ; pin_trait_impl ! (crate :: qspi :: D0Pin , QUADSPI , PF8 , 10u8) ; pin_trait_impl ! (crate :: qspi :: D1Pin , QUADSPI , PF9 , 10u8) ; pin_trait_impl ! (crate :: qspi :: SckPin , QUADSPI , PF10 , 9u8) ; pin_trait_impl ! (crate :: qspi :: NSSPin , QUADSPI , PG6 , 10u8) ; pin_trait_impl ! (crate :: rcc :: McoPin , MCO1 , PA8 , 0u8) ; pin_trait_impl ! (crate :: rcc :: McoPin , MCO2 , PC9 , 0u8) ; pin_trait_impl ! (crate :: sdmmc :: D4Pin , SDMMC1 , PB8 , 12u8) ; pin_trait_impl ! (crate :: sdmmc :: D5Pin , SDMMC1 , PB9 , 12u8) ; pin_trait_impl ! (crate :: sdmmc :: D7Pin , SDMMC1 , PC6 , 12u8) ; pin_trait_impl ! (crate :: sdmmc :: D0Pin , SDMMC1 , PC8 , 12u8) ; pin_trait_impl ! (crate :: sdmmc :: D1Pin , SDMMC1 , PC9 , 12u8) ; pin_trait_impl ! (crate :: sdmmc :: D2Pin , SDMMC1 , PC10 , 12u8) ; pin_trait_impl ! (crate :: sdmmc :: D3Pin , SDMMC1 , PC11 , 12u8) ; pin_trait_impl ! (crate :: sdmmc :: CkPin , SDMMC1 , PC12 , 12u8) ; pin_trait_impl ! (crate :: sdmmc :: CmdPin , SDMMC1 , PD2 , 12u8) ; pin_trait_impl ! (crate :: sdmmc :: CmdPin , SDMMC2 , PA0 , 9u8) ; pin_trait_impl ! (crate :: sdmmc :: D2Pin , SDMMC2 , PB3 , 9u8) ; pin_trait_impl ! (crate :: sdmmc :: D3Pin , SDMMC2 , PB4 , 9u8) ; pin_trait_impl ! (crate :: sdmmc :: D4Pin , SDMMC2 , PB8 , 10u8) ; pin_trait_impl ! (crate :: sdmmc :: D5Pin , SDMMC2 , PB9 , 10u8) ; pin_trait_impl ! (crate :: sdmmc :: D0Pin , SDMMC2 , PB14 , 9u8) ; pin_trait_impl ! (crate :: sdmmc :: D1Pin , SDMMC2 , PB15 , 9u8) ; pin_trait_impl ! (crate :: sdmmc :: CkPin , SDMMC2 , PC1 , 9u8) ; pin_trait_impl ! (crate :: sdmmc :: D7Pin , SDMMC2 , PC6 , 10u8) ; pin_trait_impl ! (crate :: sdmmc :: CkPin , SDMMC2 , PD6 , 11u8) ; pin_trait_impl ! (crate :: sdmmc :: CmdPin , SDMMC2 , PD7 , 11u8) ; pin_trait_impl ! (crate :: sdmmc :: D2Pin , SDMMC2 , PG11 , 10u8) ; pin_trait_impl ! (crate :: spi :: SckPin , SPI1 , PA5 , 5u8) ; pin_trait_impl ! (crate :: spi :: MisoPin , SPI1 , PA6 , 5u8) ; pin_trait_impl ! (crate :: spi :: MosiPin , SPI1 , PA7 , 5u8) ; pin_trait_impl ! (crate :: spi :: SckPin , SPI1 , PB3 , 5u8) ; pin_trait_impl ! (crate :: spi :: MisoPin , SPI1 , PB4 , 5u8) ; pin_trait_impl ! (crate :: spi :: MosiPin , SPI1 , PB5 , 5u8) ; pin_trait_impl ! (crate :: spi :: MosiPin , SPI1 , PD7 , 5u8) ; pin_trait_impl ! (crate :: spi :: MisoPin , SPI1 , PG9 , 5u8) ; pin_trait_impl ! (crate :: spi :: SckPin , SPI1 , PG11 , 5u8) ; pin_trait_impl ! (crate :: spi :: SckPin , SPI2 , PA9 , 5u8) ; pin_trait_impl ! (crate :: spi :: SckPin , SPI2 , PA12 , 5u8) ; pin_trait_impl ! (crate :: spi :: SckPin , SPI2 , PB10 , 5u8) ; pin_trait_impl ! (crate :: spi :: SckPin , SPI2 , PB13 , 5u8) ; pin_trait_impl ! (crate :: spi :: MisoPin , SPI2 , PB14 , 5u8) ; pin_trait_impl ! (crate :: spi :: MosiPin , SPI2 , PB15 , 5u8) ; pin_trait_impl ! (crate :: spi :: MosiPin , SPI2 , PC1 , 5u8) ; pin_trait_impl ! (crate :: spi :: SckPin , SPI2 , PD3 , 5u8) ; pin_trait_impl ! (crate :: spi :: SckPin , SPI2 , PI1 , 5u8) ; pin_trait_impl ! (crate :: spi :: MisoPin , SPI2 , PI2 , 5u8) ; pin_trait_impl ! (crate :: spi :: MosiPin , SPI2 , PI3 , 5u8) ; pin_trait_impl ! (crate :: spi :: MosiPin , SPI3 , PB2 , 7u8) ; pin_trait_impl ! (crate :: spi :: SckPin , SPI3 , PB3 , 6u8) ; pin_trait_impl ! (crate :: spi :: MisoPin , SPI3 , PB4 , 6u8) ; pin_trait_impl ! (crate :: spi :: MosiPin , SPI3 , PB5 , 7u8) ; pin_trait_impl ! (crate :: spi :: SckPin , SPI3 , PC10 , 6u8) ; pin_trait_impl ! (crate :: spi :: MisoPin , SPI3 , PC11 , 6u8) ; pin_trait_impl ! (crate :: spi :: MosiPin , SPI3 , PC12 , 6u8) ; pin_trait_impl ! (crate :: spi :: MosiPin , SPI3 , PD6 , 5u8) ; pin_trait_impl ! (crate :: spi :: SckPin , SPI4 , PE2 , 5u8) ; pin_trait_impl ! (crate :: spi :: MisoPin , SPI4 , PE5 , 5u8) ; pin_trait_impl ! (crate :: spi :: MosiPin , SPI4 , PE6 , 5u8) ; pin_trait_impl ! (crate :: spi :: SckPin , SPI4 , PE12 , 5u8) ; pin_trait_impl ! (crate :: spi :: MisoPin , SPI4 , PE13 , 5u8) ; pin_trait_impl ! (crate :: spi :: MosiPin , SPI4 , PE14 , 5u8) ; pin_trait_impl ! (crate :: spi :: SckPin , SPI5 , PF7 , 5u8) ; pin_trait_impl ! (crate :: spi :: MisoPin , SPI5 , PF8 , 5u8) ; pin_trait_impl ! (crate :: spi :: MosiPin , SPI5 , PF9 , 5u8) ; pin_trait_impl ! (crate :: spi :: MosiPin , SPI5 , PF11 , 5u8) ; pin_trait_impl ! (crate :: spi :: SckPin , SPI5 , PH6 , 5u8) ; pin_trait_impl ! (crate :: spi :: MisoPin , SPI5 , PH7 , 5u8) ; pin_trait_impl ! (crate :: spi :: MosiPin , SPI5 , PJ10 , 5u8) ; pin_trait_impl ! (crate :: spi :: MisoPin , SPI5 , PJ11 , 5u8) ; pin_trait_impl ! (crate :: spi :: SckPin , SPI5 , PK0 , 5u8) ; pin_trait_impl ! (crate :: spi :: SckPin , SPI6 , PA5 , 8u8) ; pin_trait_impl ! (crate :: spi :: MisoPin , SPI6 , PA6 , 8u8) ; pin_trait_impl ! (crate :: spi :: MosiPin , SPI6 , PA7 , 8u8) ; pin_trait_impl ! (crate :: spi :: SckPin , SPI6 , PB3 , 8u8) ; pin_trait_impl ! (crate :: spi :: MisoPin , SPI6 , PB4 , 8u8) ; pin_trait_impl ! (crate :: spi :: MosiPin , SPI6 , PB5 , 8u8) ; pin_trait_impl ! (crate :: spi :: MisoPin , SPI6 , PG12 , 5u8) ; pin_trait_impl ! (crate :: spi :: SckPin , SPI6 , PG13 , 5u8) ; pin_trait_impl ! (crate :: spi :: MosiPin , SPI6 , PG14 , 5u8) ; pin_trait_impl ! (crate :: pwm :: BreakInputPin , TIM1 , PA6 , 1u8) ; pin_trait_impl ! (crate :: pwm :: BreakInputComparator1Pin , TIM1 , PA6 , 12u8) ; pin_trait_impl ! (crate :: pwm :: BreakInputComparator2Pin , TIM1 , PA6 , 12u8) ; pin_trait_impl ! (crate :: pwm :: Channel1ComplementaryPin , TIM1 , PA7 , 1u8) ; pin_trait_impl ! (crate :: pwm :: Channel1Pin , TIM1 , PA8 , 1u8) ; pin_trait_impl ! (crate :: pwm :: Channel2Pin , TIM1 , PA9 , 1u8) ; pin_trait_impl ! (crate :: pwm :: Channel3Pin , TIM1 , PA10 , 1u8) ; pin_trait_impl ! (crate :: pwm :: Channel4Pin , TIM1 , PA11 , 1u8) ; pin_trait_impl ! (crate :: pwm :: ExternalTriggerPin , TIM1 , PA12 , 1u8) ; pin_trait_impl ! (crate :: pwm :: Channel2ComplementaryPin , TIM1 , PB0 , 1u8) ; pin_trait_impl ! (crate :: pwm :: Channel3ComplementaryPin , TIM1 , PB1 , 1u8) ; pin_trait_impl ! (crate :: pwm :: BreakInputPin , TIM1 , PB12 , 1u8) ; pin_trait_impl ! (crate :: pwm :: BreakInputComparator1Pin , TIM1 , PB12 , 13u8) ; pin_trait_impl ! (crate :: pwm :: BreakInputComparator2Pin , TIM1 , PB12 , 13u8) ; pin_trait_impl ! (crate :: pwm :: Channel1ComplementaryPin , TIM1 , PB13 , 1u8) ; pin_trait_impl ! (crate :: pwm :: Channel2ComplementaryPin , TIM1 , PB14 , 1u8) ; pin_trait_impl ! (crate :: pwm :: Channel3ComplementaryPin , TIM1 , PB15 , 1u8) ; pin_trait_impl ! (crate :: pwm :: BreakInput2Pin , TIM1 , PE6 , 1u8) ; pin_trait_impl ! (crate :: pwm :: BreakInput2Comparator1Pin , TIM1 , PE6 , 11u8) ; pin_trait_impl ! (crate :: pwm :: BreakInput2Comparator2Pin , TIM1 , PE6 , 11u8) ; pin_trait_impl ! (crate :: pwm :: ExternalTriggerPin , TIM1 , PE7 , 1u8) ; pin_trait_impl ! (crate :: pwm :: Channel1ComplementaryPin , TIM1 , PE8 , 1u8) ; pin_trait_impl ! (crate :: pwm :: Channel1Pin , TIM1 , PE9 , 1u8) ; pin_trait_impl ! (crate :: pwm :: Channel2ComplementaryPin , TIM1 , PE10 , 1u8) ; pin_trait_impl ! (crate :: pwm :: Channel2Pin , TIM1 , PE11 , 1u8) ; pin_trait_impl ! (crate :: pwm :: Channel3ComplementaryPin , TIM1 , PE12 , 1u8) ; pin_trait_impl ! (crate :: pwm :: Channel3Pin , TIM1 , PE13 , 1u8) ; pin_trait_impl ! (crate :: pwm :: Channel4Pin , TIM1 , PE14 , 1u8) ; pin_trait_impl ! (crate :: pwm :: BreakInputPin , TIM1 , PE15 , 1u8) ; pin_trait_impl ! (crate :: pwm :: BreakInputComparator1Pin , TIM1 , PE15 , 13u8) ; pin_trait_impl ! (crate :: pwm :: BreakInputComparator2Pin , TIM1 , PE15 , 13u8) ; pin_trait_impl ! (crate :: pwm :: BreakInput2Pin , TIM1 , PG4 , 1u8) ; pin_trait_impl ! (crate :: pwm :: BreakInput2Comparator1Pin , TIM1 , PG4 , 11u8) ; pin_trait_impl ! (crate :: pwm :: BreakInput2Comparator2Pin , TIM1 , PG4 , 11u8) ; pin_trait_impl ! (crate :: pwm :: ExternalTriggerPin , TIM1 , PG5 , 1u8) ; pin_trait_impl ! (crate :: pwm :: Channel3ComplementaryPin , TIM1 , PJ8 , 1u8) ; pin_trait_impl ! (crate :: pwm :: Channel3Pin , TIM1 , PJ9 , 1u8) ; pin_trait_impl ! (crate :: pwm :: Channel2ComplementaryPin , TIM1 , PJ10 , 1u8) ; pin_trait_impl ! (crate :: pwm :: Channel2Pin , TIM1 , PJ11 , 1u8) ; pin_trait_impl ! (crate :: pwm :: Channel1ComplementaryPin , TIM1 , PK0 , 1u8) ; pin_trait_impl ! (crate :: pwm :: Channel1Pin , TIM1 , PK1 , 1u8) ; pin_trait_impl ! (crate :: pwm :: BreakInputPin , TIM1 , PK2 , 1u8) ; pin_trait_impl ! (crate :: pwm :: BreakInputComparator1Pin , TIM1 , PK2 , 11u8) ; pin_trait_impl ! (crate :: pwm :: BreakInputComparator2Pin , TIM1 , PK2 , 11u8) ; pin_trait_impl ! (crate :: pwm :: Channel1Pin , TIM12 , PB14 , 2u8) ; pin_trait_impl ! (crate :: pwm :: Channel2Pin , TIM12 , PB15 , 2u8) ; pin_trait_impl ! (crate :: pwm :: Channel1Pin , TIM12 , PH6 , 2u8) ; pin_trait_impl ! (crate :: pwm :: Channel2Pin , TIM12 , PH9 , 2u8) ; pin_trait_impl ! (crate :: pwm :: Channel1Pin , TIM13 , PA6 , 9u8) ; pin_trait_impl ! (crate :: pwm :: Channel1Pin , TIM13 , PF8 , 9u8) ; pin_trait_impl ! (crate :: pwm :: Channel1Pin , TIM14 , PA7 , 9u8) ; pin_trait_impl ! (crate :: pwm :: Channel1Pin , TIM14 , PF9 , 9u8) ; pin_trait_impl ! (crate :: pwm :: BreakInputPin , TIM15 , PA0 , 4u8) ; pin_trait_impl ! (crate :: pwm :: Channel1ComplementaryPin , TIM15 , PA1 , 4u8) ; pin_trait_impl ! (crate :: pwm :: Channel1Pin , TIM15 , PA2 , 4u8) ; pin_trait_impl ! (crate :: pwm :: Channel2Pin , TIM15 , PA3 , 4u8) ; pin_trait_impl ! (crate :: pwm :: BreakInputPin , TIM15 , PE3 , 4u8) ; pin_trait_impl ! (crate :: pwm :: Channel1ComplementaryPin , TIM15 , PE4 , 4u8) ; pin_trait_impl ! (crate :: pwm :: Channel1Pin , TIM15 , PE5 , 4u8) ; pin_trait_impl ! (crate :: pwm :: Channel2Pin , TIM15 , PE6 , 4u8) ; pin_trait_impl ! (crate :: pwm :: BreakInputPin , TIM16 , PB4 , 1u8) ; pin_trait_impl ! (crate :: pwm :: Channel1ComplementaryPin , TIM16 , PB6 , 1u8) ; pin_trait_impl ! (crate :: pwm :: Channel1Pin , TIM16 , PB8 , 1u8) ; pin_trait_impl ! (crate :: pwm :: Channel1Pin , TIM16 , PF6 , 1u8) ; pin_trait_impl ! (crate :: pwm :: Channel1ComplementaryPin , TIM16 , PF8 , 1u8) ; pin_trait_impl ! (crate :: pwm :: BreakInputPin , TIM16 , PF10 , 1u8) ; pin_trait_impl ! (crate :: pwm :: BreakInputPin , TIM17 , PB5 , 1u8) ; pin_trait_impl ! (crate :: pwm :: Channel1ComplementaryPin , TIM17 , PB7 , 1u8) ; pin_trait_impl ! (crate :: pwm :: Channel1Pin , TIM17 , PB9 , 1u8) ; pin_trait_impl ! (crate :: pwm :: Channel1Pin , TIM17 , PF7 , 1u8) ; pin_trait_impl ! (crate :: pwm :: Channel1ComplementaryPin , TIM17 , PF9 , 1u8) ; pin_trait_impl ! (crate :: pwm :: BreakInputPin , TIM17 , PG6 , 1u8) ; pin_trait_impl ! (crate :: pwm :: Channel1Pin , TIM2 , PA0 , 1u8) ; pin_trait_impl ! (crate :: pwm :: ExternalTriggerPin , TIM2 , PA0 , 1u8) ; pin_trait_impl ! (crate :: pwm :: Channel2Pin , TIM2 , PA1 , 1u8) ; pin_trait_impl ! (crate :: pwm :: Channel3Pin , TIM2 , PA2 , 1u8) ; pin_trait_impl ! (crate :: pwm :: Channel4Pin , TIM2 , PA3 , 1u8) ; pin_trait_impl ! (crate :: pwm :: Channel1Pin , TIM2 , PA5 , 1u8) ; pin_trait_impl ! (crate :: pwm :: ExternalTriggerPin , TIM2 , PA5 , 1u8) ; pin_trait_impl ! (crate :: pwm :: Channel1Pin , TIM2 , PA15 , 1u8) ; pin_trait_impl ! (crate :: pwm :: ExternalTriggerPin , TIM2 , PA15 , 1u8) ; pin_trait_impl ! (crate :: pwm :: Channel2Pin , TIM2 , PB3 , 1u8) ; pin_trait_impl ! (crate :: pwm :: Channel3Pin , TIM2 , PB10 , 1u8) ; pin_trait_impl ! (crate :: pwm :: Channel4Pin , TIM2 , PB11 , 1u8) ; pin_trait_impl ! (crate :: pwm :: Channel1Pin , TIM3 , PA6 , 2u8) ; pin_trait_impl ! (crate :: pwm :: Channel2Pin , TIM3 , PA7 , 2u8) ; pin_trait_impl ! (crate :: pwm :: Channel3Pin , TIM3 , PB0 , 2u8) ; pin_trait_impl ! (crate :: pwm :: Channel4Pin , TIM3 , PB1 , 2u8) ; pin_trait_impl ! (crate :: pwm :: Channel1Pin , TIM3 , PB4 , 2u8) ; pin_trait_impl ! (crate :: pwm :: Channel2Pin , TIM3 , PB5 , 2u8) ; pin_trait_impl ! (crate :: pwm :: Channel1Pin , TIM3 , PC6 , 2u8) ; pin_trait_impl ! (crate :: pwm :: Channel2Pin , TIM3 , PC7 , 2u8) ; pin_trait_impl ! (crate :: pwm :: Channel3Pin , TIM3 , PC8 , 2u8) ; pin_trait_impl ! (crate :: pwm :: Channel4Pin , TIM3 , PC9 , 2u8) ; pin_trait_impl ! (crate :: pwm :: ExternalTriggerPin , TIM3 , PD2 , 2u8) ; pin_trait_impl ! (crate :: pwm :: Channel1Pin , TIM4 , PB6 , 2u8) ; pin_trait_impl ! (crate :: pwm :: Channel2Pin , TIM4 , PB7 , 2u8) ; pin_trait_impl ! (crate :: pwm :: Channel3Pin , TIM4 , PB8 , 2u8) ; pin_trait_impl ! (crate :: pwm :: Channel4Pin , TIM4 , PB9 , 2u8) ; pin_trait_impl ! (crate :: pwm :: Channel1Pin , TIM4 , PD12 , 2u8) ; pin_trait_impl ! (crate :: pwm :: Channel2Pin , TIM4 , PD13 , 2u8) ; pin_trait_impl ! (crate :: pwm :: Channel3Pin , TIM4 , PD14 , 2u8) ; pin_trait_impl ! (crate :: pwm :: Channel4Pin , TIM4 , PD15 , 2u8) ; pin_trait_impl ! (crate :: pwm :: ExternalTriggerPin , TIM4 , PE0 , 2u8) ; pin_trait_impl ! (crate :: pwm :: Channel1Pin , TIM5 , PA0 , 2u8) ; pin_trait_impl ! (crate :: pwm :: Channel2Pin , TIM5 , PA1 , 2u8) ; pin_trait_impl ! (crate :: pwm :: Channel3Pin , TIM5 , PA2 , 2u8) ; pin_trait_impl ! (crate :: pwm :: Channel4Pin , TIM5 , PA3 , 2u8) ; pin_trait_impl ! (crate :: pwm :: ExternalTriggerPin , TIM5 , PA4 , 2u8) ; pin_trait_impl ! (crate :: pwm :: ExternalTriggerPin , TIM5 , PH8 , 2u8) ; pin_trait_impl ! (crate :: pwm :: Channel1Pin , TIM5 , PH10 , 2u8) ; pin_trait_impl ! (crate :: pwm :: Channel2Pin , TIM5 , PH11 , 2u8) ; pin_trait_impl ! (crate :: pwm :: Channel3Pin , TIM5 , PH12 , 2u8) ; pin_trait_impl ! (crate :: pwm :: Channel4Pin , TIM5 , PI0 , 2u8) ; pin_trait_impl ! (crate :: pwm :: ExternalTriggerPin , TIM8 , PA0 , 3u8) ; pin_trait_impl ! (crate :: pwm :: Channel1ComplementaryPin , TIM8 , PA5 , 3u8) ; pin_trait_impl ! (crate :: pwm :: BreakInputPin , TIM8 , PA6 , 3u8) ; pin_trait_impl ! (crate :: pwm :: BreakInputComparator1Pin , TIM8 , PA6 , 10u8) ; pin_trait_impl ! (crate :: pwm :: BreakInputComparator2Pin , TIM8 , PA6 , 10u8) ; pin_trait_impl ! (crate :: pwm :: Channel1ComplementaryPin , TIM8 , PA7 , 3u8) ; pin_trait_impl ! (crate :: pwm :: BreakInput2Pin , TIM8 , PA8 , 3u8) ; pin_trait_impl ! (crate :: pwm :: BreakInput2Comparator1Pin , TIM8 , PA8 , 12u8) ; pin_trait_impl ! (crate :: pwm :: BreakInput2Comparator2Pin , TIM8 , PA8 , 12u8) ; pin_trait_impl ! (crate :: pwm :: Channel2ComplementaryPin , TIM8 , PB0 , 3u8) ; pin_trait_impl ! (crate :: pwm :: Channel3ComplementaryPin , TIM8 , PB1 , 3u8) ; pin_trait_impl ! (crate :: pwm :: Channel2ComplementaryPin , TIM8 , PB14 , 3u8) ; pin_trait_impl ! (crate :: pwm :: Channel3ComplementaryPin , TIM8 , PB15 , 3u8) ; pin_trait_impl ! (crate :: pwm :: Channel1Pin , TIM8 , PC6 , 3u8) ; pin_trait_impl ! (crate :: pwm :: Channel2Pin , TIM8 , PC7 , 3u8) ; pin_trait_impl ! (crate :: pwm :: Channel3Pin , TIM8 , PC8 , 3u8) ; pin_trait_impl ! (crate :: pwm :: Channel4Pin , TIM8 , PC9 , 3u8) ; pin_trait_impl ! (crate :: pwm :: BreakInputPin , TIM8 , PG2 , 3u8) ; pin_trait_impl ! (crate :: pwm :: BreakInputComparator1Pin , TIM8 , PG2 , 11u8) ; pin_trait_impl ! (crate :: pwm :: BreakInputComparator2Pin , TIM8 , PG2 , 11u8) ; pin_trait_impl ! (crate :: pwm :: BreakInput2Pin , TIM8 , PG3 , 3u8) ; pin_trait_impl ! (crate :: pwm :: BreakInput2Comparator1Pin , TIM8 , PG3 , 11u8) ; pin_trait_impl ! (crate :: pwm :: BreakInput2Comparator2Pin , TIM8 , PG3 , 11u8) ; pin_trait_impl ! (crate :: pwm :: ExternalTriggerPin , TIM8 , PG8 , 3u8) ; pin_trait_impl ! (crate :: pwm :: Channel1ComplementaryPin , TIM8 , PH13 , 3u8) ; pin_trait_impl ! (crate :: pwm :: Channel2ComplementaryPin , TIM8 , PH14 , 3u8) ; pin_trait_impl ! (crate :: pwm :: Channel3ComplementaryPin , TIM8 , PH15 , 3u8) ; pin_trait_impl ! (crate :: pwm :: BreakInput2Pin , TIM8 , PI1 , 3u8) ; pin_trait_impl ! (crate :: pwm :: BreakInput2Comparator1Pin , TIM8 , PI1 , 11u8) ; pin_trait_impl ! (crate :: pwm :: BreakInput2Comparator2Pin , TIM8 , PI1 , 11u8) ; pin_trait_impl ! (crate :: pwm :: Channel4Pin , TIM8 , PI2 , 3u8) ; pin_trait_impl ! (crate :: pwm :: ExternalTriggerPin , TIM8 , PI3 , 3u8) ; pin_trait_impl ! (crate :: pwm :: BreakInputPin , TIM8 , PI4 , 3u8) ; pin_trait_impl ! (crate :: pwm :: BreakInputComparator1Pin , TIM8 , PI4 , 11u8) ; pin_trait_impl ! (crate :: pwm :: BreakInputComparator2Pin , TIM8 , PI4 , 11u8) ; pin_trait_impl ! (crate :: pwm :: Channel1Pin , TIM8 , PI5 , 3u8) ; pin_trait_impl ! (crate :: pwm :: Channel2Pin , TIM8 , PI6 , 3u8) ; pin_trait_impl ! (crate :: pwm :: Channel3Pin , TIM8 , PI7 , 3u8) ; pin_trait_impl ! (crate :: pwm :: Channel2Pin , TIM8 , PJ6 , 3u8) ; pin_trait_impl ! (crate :: pwm :: Channel2ComplementaryPin , TIM8 , PJ7 , 3u8) ; pin_trait_impl ! (crate :: pwm :: Channel1Pin , TIM8 , PJ8 , 3u8) ; pin_trait_impl ! (crate :: pwm :: Channel1ComplementaryPin , TIM8 , PJ9 , 3u8) ; pin_trait_impl ! (crate :: pwm :: Channel2Pin , TIM8 , PJ10 , 3u8) ; pin_trait_impl ! (crate :: pwm :: Channel2ComplementaryPin , TIM8 , PJ11 , 3u8) ; pin_trait_impl ! (crate :: pwm :: Channel3Pin , TIM8 , PK0 , 3u8) ; pin_trait_impl ! (crate :: pwm :: Channel3ComplementaryPin , TIM8 , PK1 , 3u8) ; pin_trait_impl ! (crate :: pwm :: BreakInputPin , TIM8 , PK2 , 3u8) ; pin_trait_impl ! (crate :: pwm :: BreakInputComparator1Pin , TIM8 , PK2 , 10u8) ; pin_trait_impl ! (crate :: pwm :: BreakInputComparator2Pin , TIM8 , PK2 , 10u8) ; pin_trait_impl ! (crate :: usart :: TxPin , UART4 , PA0 , 8u8) ; pin_trait_impl ! (crate :: usart :: RxPin , UART4 , PA1 , 8u8) ; pin_trait_impl ! (crate :: usart :: RxPin , UART4 , PA11 , 6u8) ; pin_trait_impl ! (crate :: usart :: TxPin , UART4 , PA12 , 6u8) ; pin_trait_impl ! (crate :: usart :: DePin , UART4 , PA15 , 8u8) ; pin_trait_impl ! (crate :: usart :: RtsPin , UART4 , PA15 , 8u8) ; pin_trait_impl ! (crate :: usart :: CtsPin , UART4 , PB0 , 8u8) ; pin_trait_impl ! (crate :: usart :: RxPin , UART4 , PB8 , 8u8) ; pin_trait_impl ! (crate :: usart :: TxPin , UART4 , PB9 , 8u8) ; pin_trait_impl ! (crate :: usart :: DePin , UART4 , PB14 , 8u8) ; pin_trait_impl ! (crate :: usart :: RtsPin , UART4 , PB14 , 8u8) ; pin_trait_impl ! (crate :: usart :: CtsPin , UART4 , PB15 , 8u8) ; pin_trait_impl ! (crate :: usart :: TxPin , UART4 , PC10 , 8u8) ; pin_trait_impl ! (crate :: usart :: RxPin , UART4 , PC11 , 8u8) ; pin_trait_impl ! (crate :: usart :: RxPin , UART4 , PD0 , 8u8) ; pin_trait_impl ! (crate :: usart :: TxPin , UART4 , PD1 , 8u8) ; pin_trait_impl ! (crate :: usart :: TxPin , UART4 , PH13 , 8u8) ; pin_trait_impl ! (crate :: usart :: RxPin , UART4 , PH14 , 8u8) ; pin_trait_impl ! (crate :: usart :: RxPin , UART4 , PI9 , 8u8) ; pin_trait_impl ! (crate :: usart :: RxPin , UART5 , PB5 , 14u8) ; pin_trait_impl ! (crate :: usart :: TxPin , UART5 , PB6 , 14u8) ; pin_trait_impl ! (crate :: usart :: RxPin , UART5 , PB12 , 14u8) ; pin_trait_impl ! (crate :: usart :: TxPin , UART5 , PB13 , 14u8) ; pin_trait_impl ! (crate :: usart :: DePin , UART5 , PC8 , 8u8) ; pin_trait_impl ! (crate :: usart :: RtsPin , UART5 , PC8 , 8u8) ; pin_trait_impl ! (crate :: usart :: CtsPin , UART5 , PC9 , 8u8) ; pin_trait_impl ! (crate :: usart :: TxPin , UART5 , PC12 , 8u8) ; pin_trait_impl ! (crate :: usart :: RxPin , UART5 , PD2 , 8u8) ; pin_trait_impl ! (crate :: usart :: RxPin , UART7 , PA8 , 11u8) ; pin_trait_impl ! (crate :: usart :: TxPin , UART7 , PA15 , 11u8) ; pin_trait_impl ! (crate :: usart :: RxPin , UART7 , PB3 , 11u8) ; pin_trait_impl ! (crate :: usart :: TxPin , UART7 , PB4 , 11u8) ; pin_trait_impl ! (crate :: usart :: RxPin , UART7 , PE7 , 7u8) ; pin_trait_impl ! (crate :: usart :: TxPin , UART7 , PE8 , 7u8) ; pin_trait_impl ! (crate :: usart :: DePin , UART7 , PE9 , 7u8) ; pin_trait_impl ! (crate :: usart :: RtsPin , UART7 , PE9 , 7u8) ; pin_trait_impl ! (crate :: usart :: CtsPin , UART7 , PE10 , 7u8) ; pin_trait_impl ! (crate :: usart :: RxPin , UART7 , PF6 , 7u8) ; pin_trait_impl ! (crate :: usart :: TxPin , UART7 , PF7 , 7u8) ; pin_trait_impl ! (crate :: usart :: DePin , UART7 , PF8 , 7u8) ; pin_trait_impl ! (crate :: usart :: RtsPin , UART7 , PF8 , 7u8) ; pin_trait_impl ! (crate :: usart :: CtsPin , UART7 , PF9 , 7u8) ; pin_trait_impl ! (crate :: usart :: CtsPin , UART8 , PD14 , 8u8) ; pin_trait_impl ! (crate :: usart :: DePin , UART8 , PD15 , 8u8) ; pin_trait_impl ! (crate :: usart :: RtsPin , UART8 , PD15 , 8u8) ; pin_trait_impl ! (crate :: usart :: RxPin , UART8 , PE0 , 8u8) ; pin_trait_impl ! (crate :: usart :: TxPin , UART8 , PE1 , 8u8) ; pin_trait_impl ! (crate :: usart :: TxPin , UART8 , PJ8 , 8u8) ; pin_trait_impl ! (crate :: usart :: RxPin , UART8 , PJ9 , 8u8) ; pin_trait_impl ! (crate :: usart :: CkPin , USART1 , PA8 , 7u8) ; pin_trait_impl ! (crate :: usart :: TxPin , USART1 , PA9 , 7u8) ; pin_trait_impl ! (crate :: usart :: RxPin , USART1 , PA10 , 7u8) ; pin_trait_impl ! (crate :: usart :: CtsPin , USART1 , PA11 , 7u8) ; pin_trait_impl ! (crate :: usart :: DePin , USART1 , PA12 , 7u8) ; pin_trait_impl ! (crate :: usart :: RtsPin , USART1 , PA12 , 7u8) ; pin_trait_impl ! (crate :: usart :: TxPin , USART1 , PB6 , 7u8) ; pin_trait_impl ! (crate :: usart :: RxPin , USART1 , PB7 , 7u8) ; pin_trait_impl ! (crate :: usart :: TxPin , USART1 , PB14 , 4u8) ; pin_trait_impl ! (crate :: usart :: RxPin , USART1 , PB15 , 4u8) ; pin_trait_impl ! (crate :: usart :: CtsPin , USART2 , PA0 , 7u8) ; pin_trait_impl ! (crate :: usart :: DePin , USART2 , PA1 , 7u8) ; pin_trait_impl ! (crate :: usart :: RtsPin , USART2 , PA1 , 7u8) ; pin_trait_impl ! (crate :: usart :: TxPin , USART2 , PA2 , 7u8) ; pin_trait_impl ! (crate :: usart :: RxPin , USART2 , PA3 , 7u8) ; pin_trait_impl ! (crate :: usart :: CkPin , USART2 , PA4 , 7u8) ; pin_trait_impl ! (crate :: usart :: CtsPin , USART2 , PD3 , 7u8) ; pin_trait_impl ! (crate :: usart :: DePin , USART2 , PD4 , 7u8) ; pin_trait_impl ! (crate :: usart :: RtsPin , USART2 , PD4 , 7u8) ; pin_trait_impl ! (crate :: usart :: TxPin , USART2 , PD5 , 7u8) ; pin_trait_impl ! (crate :: usart :: RxPin , USART2 , PD6 , 7u8) ; pin_trait_impl ! (crate :: usart :: CkPin , USART2 , PD7 , 7u8) ; pin_trait_impl ! (crate :: usart :: TxPin , USART3 , PB10 , 7u8) ; pin_trait_impl ! (crate :: usart :: RxPin , USART3 , PB11 , 7u8) ; pin_trait_impl ! (crate :: usart :: CkPin , USART3 , PB12 , 7u8) ; pin_trait_impl ! (crate :: usart :: CtsPin , USART3 , PB13 , 7u8) ; pin_trait_impl ! (crate :: usart :: DePin , USART3 , PB14 , 7u8) ; pin_trait_impl ! (crate :: usart :: RtsPin , USART3 , PB14 , 7u8) ; pin_trait_impl ! (crate :: usart :: TxPin , USART3 , PC10 , 7u8) ; pin_trait_impl ! (crate :: usart :: RxPin , USART3 , PC11 , 7u8) ; pin_trait_impl ! (crate :: usart :: CkPin , USART3 , PC12 , 7u8) ; pin_trait_impl ! (crate :: usart :: TxPin , USART3 , PD8 , 7u8) ; pin_trait_impl ! (crate :: usart :: RxPin , USART3 , PD9 , 7u8) ; pin_trait_impl ! (crate :: usart :: CkPin , USART3 , PD10 , 7u8) ; pin_trait_impl ! (crate :: usart :: CtsPin , USART3 , PD11 , 7u8) ; pin_trait_impl ! (crate :: usart :: DePin , USART3 , PD12 , 7u8) ; pin_trait_impl ! (crate :: usart :: RtsPin , USART3 , PD12 , 7u8) ; pin_trait_impl ! (crate :: usart :: TxPin , USART6 , PC6 , 7u8) ; pin_trait_impl ! (crate :: usart :: RxPin , USART6 , PC7 , 7u8) ; pin_trait_impl ! (crate :: usart :: CkPin , USART6 , PC8 , 7u8) ; pin_trait_impl ! (crate :: usart :: CkPin , USART6 , PG7 , 7u8) ; pin_trait_impl ! (crate :: usart :: DePin , USART6 , PG8 , 7u8) ; pin_trait_impl ! (crate :: usart :: RtsPin , USART6 , PG8 , 7u8) ; pin_trait_impl ! (crate :: usart :: RxPin , USART6 , PG9 , 7u8) ; pin_trait_impl ! (crate :: usart :: DePin , USART6 , PG12 , 7u8) ; pin_trait_impl ! (crate :: usart :: RtsPin , USART6 , PG12 , 7u8) ; pin_trait_impl ! (crate :: usart :: CtsPin , USART6 , PG13 , 7u8) ; pin_trait_impl ! (crate :: usart :: TxPin , USART6 , PG14 , 7u8) ; pin_trait_impl ! (crate :: usart :: CtsPin , USART6 , PG15 , 7u8) ; pin_trait_impl ! (crate :: usb_otg :: DmPin , USB_OTG_FS , PA11 , 10u8) ; pin_trait_impl ! (crate :: usb_otg :: DpPin , USB_OTG_FS , PA12 , 10u8) ; pin_trait_impl ! (crate :: usb_otg :: UlpiD0Pin , USB_OTG_HS , PA3 , 10u8) ; pin_trait_impl ! (crate :: usb_otg :: UlpiClkPin , USB_OTG_HS , PA5 , 10u8) ; pin_trait_impl ! (crate :: usb_otg :: UlpiD1Pin , USB_OTG_HS , PB0 , 10u8) ; pin_trait_impl ! (crate :: usb_otg :: UlpiD2Pin , USB_OTG_HS , PB1 , 10u8) ; pin_trait_impl ! (crate :: usb_otg :: UlpiD7Pin , USB_OTG_HS , PB5 , 10u8) ; pin_trait_impl ! (crate :: usb_otg :: UlpiD3Pin , USB_OTG_HS , PB10 , 10u8) ; pin_trait_impl ! (crate :: usb_otg :: UlpiD4Pin , USB_OTG_HS , PB11 , 10u8) ; pin_trait_impl ! (crate :: usb_otg :: UlpiD5Pin , USB_OTG_HS , PB12 , 10u8) ; pin_trait_impl ! (crate :: usb_otg :: UlpiD6Pin , USB_OTG_HS , PB13 , 10u8) ; pin_trait_impl ! (crate :: usb_otg :: DmPin , USB_OTG_HS , PB14 , 12u8) ; pin_trait_impl ! (crate :: usb_otg :: DpPin , USB_OTG_HS , PB15 , 12u8) ; pin_trait_impl ! (crate :: usb_otg :: UlpiStpPin , USB_OTG_HS , PC0 , 10u8) ; pin_trait_impl ! (crate :: usb_otg :: UlpiNxtPin , USB_OTG_HS , PH4 , 10u8) ; pin_trait_impl ! (crate :: usb_otg :: UlpiDirPin , USB_OTG_HS , PI11 , 10u8) ; dma_trait_impl ! (crate :: dcmi :: FrameDma , DCMI , { dmamux : DMAMUX1 } , 75u8) ; dma_trait_impl ! (crate :: i2c :: RxDma , I2C1 , { dmamux : DMAMUX1 } , 33u8) ; dma_trait_impl ! (crate :: i2c :: TxDma , I2C1 , { dmamux : DMAMUX1 } , 34u8) ; dma_trait_impl ! (crate :: i2c :: RxDma , I2C2 , { dmamux : DMAMUX1 } , 35u8) ; dma_trait_impl ! (crate :: i2c :: TxDma , I2C2 , { dmamux : DMAMUX1 } , 36u8) ; dma_trait_impl ! (crate :: i2c :: RxDma , I2C3 , { dmamux : DMAMUX1 } , 73u8) ; dma_trait_impl ! (crate :: i2c :: TxDma , I2C3 , { dmamux : DMAMUX1 } , 74u8) ; dma_trait_impl ! (crate :: i2c :: RxDma , I2C4 , { dmamux : DMAMUX2 } , 13u8) ; dma_trait_impl ! (crate :: i2c :: TxDma , I2C4 , { dmamux : DMAMUX2 } , 14u8) ; dma_trait_impl ! (crate :: usart :: RxDma , LPUART1 , { dmamux : DMAMUX2 } , 9u8) ; dma_trait_impl ! (crate :: usart :: TxDma , LPUART1 , { dmamux : DMAMUX2 } , 10u8) ; dma_trait_impl ! (crate :: spi :: RxDma , SPI1 , { dmamux : DMAMUX1 } , 37u8) ; dma_trait_impl ! (crate :: spi :: TxDma , SPI1 , { dmamux : DMAMUX1 } , 38u8) ; dma_trait_impl ! (crate :: spi :: RxDma , SPI2 , { dmamux : DMAMUX1 } , 39u8) ; dma_trait_impl ! (crate :: spi :: TxDma , SPI2 , { dmamux : DMAMUX1 } , 40u8) ; dma_trait_impl ! (crate :: spi :: RxDma , SPI3 , { dmamux : DMAMUX1 } , 61u8) ; dma_trait_impl ! (crate :: spi :: TxDma , SPI3 , { dmamux : DMAMUX1 } , 62u8) ; dma_trait_impl ! (crate :: spi :: RxDma , SPI4 , { dmamux : DMAMUX1 } , 83u8) ; dma_trait_impl ! (crate :: spi :: TxDma , SPI4 , { dmamux : DMAMUX1 } , 84u8) ; dma_trait_impl ! (crate :: spi :: RxDma , SPI5 , { dmamux : DMAMUX1 } , 85u8) ; dma_trait_impl ! (crate :: spi :: TxDma , SPI5 , { dmamux : DMAMUX1 } , 86u8) ; dma_trait_impl ! (crate :: spi :: RxDma , SPI6 , { dmamux : DMAMUX2 } , 11u8) ; dma_trait_impl ! (crate :: spi :: TxDma , SPI6 , { dmamux : DMAMUX2 } , 12u8) ; dma_trait_impl ! (crate :: usart :: RxDma , UART4 , { dmamux : DMAMUX1 } , 63u8) ; dma_trait_impl ! (crate :: usart :: TxDma , UART4 , { dmamux : DMAMUX1 } , 64u8) ; dma_trait_impl ! (crate :: usart :: RxDma , UART5 , { dmamux : DMAMUX1 } , 65u8) ; dma_trait_impl ! (crate :: usart :: TxDma , UART5 , { dmamux : DMAMUX1 } , 66u8) ; dma_trait_impl ! (crate :: usart :: RxDma , UART7 , { dmamux : DMAMUX1 } , 79u8) ; dma_trait_impl ! (crate :: usart :: TxDma , UART7 , { dmamux : DMAMUX1 } , 80u8) ; dma_trait_impl ! (crate :: usart :: RxDma , UART8 , { dmamux : DMAMUX1 } , 81u8) ; dma_trait_impl ! (crate :: usart :: TxDma , UART8 , { dmamux : DMAMUX1 } , 82u8) ; dma_trait_impl ! (crate :: usart :: RxDma , USART1 , { dmamux : DMAMUX1 } , 41u8) ; dma_trait_impl ! (crate :: usart :: TxDma , USART1 , { dmamux : DMAMUX1 } , 42u8) ; dma_trait_impl ! (crate :: usart :: RxDma , USART2 , { dmamux : DMAMUX1 } , 43u8) ; dma_trait_impl ! (crate :: usart :: TxDma , USART2 , { dmamux : DMAMUX1 } , 44u8) ; dma_trait_impl ! (crate :: usart :: RxDma , USART3 , { dmamux : DMAMUX1 } , 45u8) ; dma_trait_impl ! (crate :: usart :: TxDma , USART3 , { dmamux : DMAMUX1 } , 46u8) ; dma_trait_impl ! (crate :: usart :: RxDma , USART6 , { dmamux : DMAMUX1 } , 71u8) ; dma_trait_impl ! (crate :: usart :: TxDma , USART6 , { dmamux : DMAMUX1 } , 72u8) ; pub (crate) const DMA_CHANNEL_COUNT : usize = 16usize ; pub (crate) const BDMA_CHANNEL_COUNT : usize = 8usize ; pub (crate) const GPDMA_CHANNEL_COUNT : usize = 0usize ;